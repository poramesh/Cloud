
Network Access Control Lists (ACLs) and Security groups are two types of firewall that we can apply in our AWS environmet.


1. Level of Application: Applied at the subnet level.
2. Traffic Control: Filters inbound (ingress) and outbound (egress) traffic for the entire subnet.
3. Stateless: Rules for incoming traffic do not automatically apply to outgoing traffic.
You must define both inbound and outbound rules explicitly.
4. Rules: Each rule consists of:
Rule number (priority)
Protocol (e.g., TCP, UDP, ICMP)
Port range (if applicable)
Source or destination CIDR block
Allow or deny action
5. Default Behavior: By default, a new ACL denies all inbound and outbound traffic until rules are added.


Security Groups

we can have multiple security groups for instances. for ex: security group A, security group B. 
we can have same security group applied to instances in different subnets

1. Level of Application: Applied at the instance level (specifically at the network interface level).
2. Traffic Control: Filters traffic to and from individual EC2 instances, regardless of the subnet.
3. Stateful: If an inbound rule allows traffic, the return traffic is automatically allowed, even if there’s no corresponding outbound rule.
4. Rules: Each rule consists of:
Protocol (e.g., TCP, UDP, ICMP)
Port range (if applicable)
Source IP or CIDR block (for inbound rules)
Allow action only (cannot explicitly deny traffic; you can only allow traffic).
5. Default Behavior: By default, a new security group denies all inbound traffic and allows all outbound traffic.


Key Differences
Scope:
ACLs apply to subnets, affecting all instances within the subnet.
Security groups apply to specific instances or network interfaces.

State Management:
ACLs are stateless (must define rules for both directions).
Security groups are stateful (allow return traffic automatically).



High Numbered Ports

Definition: Ports above 1024 are called high numbered ports, commonly used for
dynamic assignment during client-server communication.
Source Port: Typically, a random high numbered port is assigned for the client (e.g., 65188).
Destination Port: For web services, the destination port is often 80 (HTTP) or 443 (HTTPS).




EXMAPLE:

web server(10.2.1.10)<-----dest port:80-----FIREWALL<------src port:65188 ----- client(10.1.1.1)
web server(10.2.1.10)-----source port:80-----FIREWALL------>dest port:65188 ----- >client(10.1.1.1)


web server is lisetning on port 80 and source port that is asisgned to the connection by the computer, it is high numbered port
it is dynammically applied to eveyr conenciton.

waht do we need in firewall to be allowed to work?

PROTOCOL SOURCE IP  DEST IP   SOURCE PORT DEST PORT
HTTP     10.1.1.1   10.2.1.10   65188     80
HTTP     10.2.1.10  10.1.1.1    80        65188

we most likely to have source port to be any and source IP be any basically caus einterent connection


PROTOCOL SOURCE IP  DEST IP   SOURCE PORT DEST PORT
HTTP     ANY   10.2.1.10       ANY         80
HTTP     10.2.1.10  ANY        80          ANY


this is where stateful and stateless ocmes in 




Common Inbound Rules for EC2 Instances

Type	  Protocol  PortRange	  Source	          Description
SSH	      TCP     	22	  Custom IP / Anywhere	 Allows SSH access for remote management (Linux instances).
RDP	      TCP	     3389	  Custom IP / Anywhere	 Allows RDP access for remote management (Windows instances).
HTTP	    TCP	     80	    Anywhere (0.0.0.0/0)	 Allows public web traffic (insecure HTTP).
HTTPS	    TCP	     443	  Anywhere (0.0.0.0/0)	 Allows secure web traffic (HTTPS).
Custom  
TCP Rule  TCP    	8080	  Custom IP / Anywhere	 Allows traffic on port 8080 (e.g., for testing servers).
Custom 
UDP Rule	UDP   	123	    Anywhere             	Allows NTP traffic for time synchronization.
All ICMP
- IPv4	  ICMP	  All	    Anywhere	            Allows ping requests (useful for testing connectivity).
MySQL/
Aurora	  TCP	    3306	  Custom IP	           Allows MySQL database traffic from specified IP.
Postgre
SQL       TCP	   5432   	Custom IP	            Allows PostgreSQL database traffic from specified IP.



(sournce can be securoty group id or ip adresss)


Explanation of Fields

Type: Commonly predefined in AWS, this field describes the type of access (e.g., SSH, HTTP).

Protocol: Specifies the network protocol (e.g., TCP, UDP, ICMP).

Port Range: Indicates the port(s) allowed. Some services, like HTTP, use standard ports, while custom applications might use non-standard ports.

Source: Defines where traffic can come from. You can specify:

Anywhere: 0.0.0.0/0 for all IPv4 addresses and ::/0 for all IPv6 addresses.
Custom IP: Restrict access to a specific IP or range (e.g., 203.0.113.0/24).
Security Group: You can use another security group as a source for internal traffic between instances.
Using inbound rules thoughtfully ensures only necessary traffic can access your instance, which helps keep it secure.










Here’s an example of a best-practice security group setup for a web application that uses an internal
Application Load Balancer (ALB) and web front end. This configuration illustrates secure access control
between the public internet, the ALB, and the EC2 instances.

Architecture Overview

1. Web Front End: A public-facing layer where users access the application (e.g., hosted on EC2 instances).

Internal ALB: Manages traffic between the web front end and the backend application servers. 
This is internal and not accessible from the public internet.

Backend Application Servers: The application logic layer, accessible only through the ALB.

Security Groups

1. Web Front-End Security Group (for public access)
Purpose: Allows HTTP/HTTPS access from the internet to the ALB.
Assigned to: ALB

Inbound Rules:
Type	Protocol	PortRange	Source	Description
HTTP	TCP      	80	      0.0.0.0/0	Allow HTTP access from anywhere
HTTPS	TCP	      443	      0.0.0.0/0	Allow HTTPS access from anywhere

Outbound Rules:
Type	     Protocol	PortRange	 Destination     	Description
All-Traffic	All	     All	     Internal ALB SG 	Allow traffic to ALB


2. Internal ALB Security Group (for secure routing within VPC)

Purpose: Controls traffic between the ALB and backend application servers.
Assigned to: Internal ALB

Inbound Rules:
Type	Protocol	Port-Range	Source	        Description
HTTP	TCP      	80	     Web Front-End SG	  Allow HTTP from Web Front-End SG
HTTPS	TCP	      443      Web Front-End SG	  Allow HTTPS from Web Front-End SG

Outbound Rules:
Type	Protocol	PortRange	Destination	        Description
All    Traffic	  All    	All	Backend App SG 	Allow traffic to Backend App SG


3. Backend Application Server Security Group (private, internal access only)

Purpose: Controls access to the backend servers, only allowing traffic from the ALB.
Assigned to: Backend EC2 instances running application logic.

Inbound Rules:
Type	 Protocol	PortRange	Source          	Description
HTTP	   TCP	  80	    Internal ALB SG	  Allow HTTP from ALB
HTTPS	   TCP	   443	  Internal ALB SG	  Allow HTTPS from ALB
Custom 
TCP	     TCP	  3306	   Database SG	     Allow database access if applicable


Outbound Rules:
Type	Protocol	PortRange  	Destination          	Description
All   Traffic	   All	     All	Database SG        Allow traffic to DB if needed
                         / Other Required Destinations	                     


Key Points for Best Practice:
Least Privilege: Only allow necessary inbound and outbound traffic.
Internal Communication: Use security groups as sources instead of IP ranges, ensuring internal communication is restricted to
specific components (ALB to backend, backend to database, etc.).
No Direct Internet Access: Backend servers only accept traffic from the internal ALB. They have no direct internet exposure.
Specific Ports: Use specific port ranges (e.g., 80, 443) instead of broad ranges to restrict access further.
Organized Naming: Name security groups clearly (e.g., Web-FE-SG, Internal-ALB-SG, Backend-App-SG) for easier maintenance and readability.


exmaple from the actual video

PUBLiC SUBNET

Security group - publicALB which is internet facing ALB

inbound: 
protocol is HTTP
port is 80
sournce is 0.0.0.0/0

outboundL 
protol HTTPS
port 80
destination PUBLICEC2 (it is only gonna allow outbound to this wenfront end)



Security group - publicEC2 which is webfront-end

inbound: 
protocol is HTTP
port is 80
sournce is PublicALB

outbound:
protol HTTPS
port 8080
destination PrivateALB






Private Subnet


Security group - parivateALB which is internal ALB

inbound: 
protocol is HTTP
port is 8080
sournce is publicEC2

Security group - parivateEc2 which is applicaiton Layer

outbound:
protol HTTPS
port 8080
destination PrivateALB




Inbound and outbound rules can have deny or allow rules.

for exampel: for through this video

https://www.youtube.com/watch?v=g2JOHLHh4rI&t=2657s








