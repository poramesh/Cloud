this we need to know:

#!/bin/bash
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
INTERFACE=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
SUBNETID=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE}/subnet-id)
echo '<center><h1>This instance is in the subnet wih ID: SUBNETID </h1></center>' > /var/www/html/index.txt
sed "s/SUBNETID/$SUBNETID/" /var/www/html/index.txt > /var/www/html/index.html

This script is a typical user data script for setting up an EC2 instance on AWS. 
Hereâ€™s what each part of the script does and how it works:

Script Breakdown

In Amazon Linux and several other Linux distributions, yum is the package manager used to
install, update, and manage software packages.

yum update -y and yum install -y httpd:

Updates the instance's packages and installs Apache (httpd), a web server package. This is often the
first step to ensure the server is updated and ready for configuration.

systemctl start httpd and systemctl enable httpd:

Starts the Apache web server immediately and sets it to start automatically on system reboot.

Retrieve Subnet Information:

INTERFACE: Uses the metadata service to get the MAC address of the network interface attached to the instance.
SUBNETID: Fetches the subnet ID associated with the instance by accessing instance metadata through
the link http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE}/subnet-id.

Generate an HTML Page with the Subnet ID:

Creates a simple HTML file with a message that includes the subnet ID.

echo Command: Outputs a basic HTML structure with a placeholder for the subnet ID into a temporary file index.txt.

sed Command: Replaces the placeholder (SUBNETID) with the actual subnet ID fetched earlier, 
then saves this to /var/www/html/index.html (the default directory for Apache web pages).

Explanation of Metadata Service (169.254.169.254)

http://169.254.169.254 is a special, constant IP address in AWS (and in many cloud environments)
used to access instance metadata. This address is reserved within the instance and does not 
change, allowing the instance to retrieve information about itself, such as:

Instance ID
AMI ID
Instance type
Region and availability zone
Networking information (such as subnet ID, private IP, public IP, etc.)

AWS provides instance metadata at the 169.254.169.254 address. This special endpoint is accessible only from 
within the instance and includes details such as:


Instance ID
Subnet ID
Security groups
Public and private IP addresses

The specific URL in the script (/latest/meta-data/network/interfaces/macs/${INTERFACE}/subnet-id) returns the subnet ID 
associated with the instance's network interface, which allows this script to dynamically fetch and display the subnet ID.

Example Result
When an EC2 instance runs this script:

The Apache server starts.

An HTML page at http://<instance-public-ip> displays the message:

This instance is in the subnet with ID: subnet-xxxxxxxx

Usage

To run this script:

Paste it into the User Data section when configuring an EC2 instance launch.
The script will execute automatically when the instance launches.
This approach is especially useful when you need dynamic, metadata-driven configuration without manual
intervention, which can be helpful for monitoring, debugging, or displaying environmental information directly on the server.



How It Works:

aws ec2 run-instances --image-id <value> --instance-type <value> --security-group-ids <value> --subnet-id <value> --key-name <value> --user-data <value>

API Request:
When you run the command, the AWS CLI sends an API request to the EC2 service.

Instance Creation: AWS provisions the instance using the specified AMI and settings, launching it 
in the selected subnet with the defined security group.

User Data Execution: After the instance is launched, it executes the user data script,
allowing for automated configurations.

SSH Access: Once the instance is running, you can connect to it using SSH with the specified key pair.

This command is a powerful way to quickly spin up EC2 instances tailored to your specific needs. Let me know if you need further details on any aspect!


Using AWS CLI to Launch Instances:


Use the command:
aws ec2 run-instances --image-id <AMI_ID> --count 2 --instance-type t2.micro --security-group-ids <SG_ID> --subnet-id <SUBNET_ID>



_____________________________________________________________
# Launch instance in Public 1A
aws ec2 run-instances --image-id <value> --instance-type <value> --security-group-ids <value> --subnet-id <value> --key-name <value> --user-data <value>


# Launch instance in Public 1B


# Launch instance in Private 1B


# Terminate instances

aws ec2 terminate-instances --instance-ids <value> <value>


_______________________________________________________________

Replace <AMI_ID>, <SG_ID>, and <SUBNET_ID> with your specific values.

--> AMI ID is region sepcific. You can get the id by lcicking on launch an instance form the dashboard. 

(launch an amazon EC2 instance , which is virtual server in the cloud.) your instance will launch in w. virginia
 
and then copy the Amazon Machine Image (AMI) id which is Amzon linux 2 ami, ssd volume type.
there are others as well like macos, red hat. 


--> instance type is t2.micro

--> security group id is the one that we created above PUBLICWEBSG, copy the security group id and paste it.

--> subnet id 

from the vpc management console, go to the subnet , copy the public-1a subnet id.

--> key name is in the security group, where we have key pairs and copy the name.

--> and laastly it is the user data that we need to specify, what it does is that it runs a web server and then it creates a 
couple of variables from the meta data where it actually grabs the subnet it.  
bically it puts in the simple webspage. we jsut need to speicify the name of that file.
in the command we just need to specific the name of the file.

//user-data-subnet-id.txt

#!/bin/bash
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
INTERFACE=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
SUBNETID=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE}/subnet-id)
echo '<center><h1>This instance is in the subnet wih ID: SUBNETID </h1></center>' > /var/www/html/index.txt
sed "s/SUBNETID/$SUBNETID/" /var/www/html/index.txt > /var/www/html/index.html




the way we do it is , the above file is in our computer. we need to set up the aws cli. we generally use the aws cli
to interact with vpc or other resrouces. 

First, ensure you have the AWS Command Line Interface (CLI) installed. You can download it here.

aws configure

This command will prompt you for:

AWS Access Key ID
AWS Secret Access Key
Default Region Name
Default Output Format (JSON is typical)


AMAZON VPC ls

Bucket-policy-vpce.json custom-vpc.md aws-cli-run-instance.md user-data-subnet-id.txt
//this all file we got in the lcoal directory.

when we run 

aws ec2 run-instances --image-id ami-0csad32434asdf --instance-type t2.micro --security-group-ids sg-0c5fs32432 --subnet-id subnet-07cee38u44 
--key-name cloud-labs-nv --user-data user-data-subnet-id.txt

after running this above command it will look like this.





Testing Configuration
After launching the instances, test connectivity between instances in different subnets to ensure
the configuration works as expected.
You can run commands to check if the instances can communicate with each other, both in public and private subnets.

{
    "Instances": [
        {
            "AmiLaunchIndex": 0,
            "ImageId": "ami-12345678",
            "InstanceId": "i-0abcd1234efgh5678",
            "InstanceType": "t2.micro",
            "KeyName": "MyKeyPair",
            "LaunchTime": "2024-11-02T12:00:00.000Z",
            "Monitoring": {
                "State": "disabled"
            },
            "NetworkInterfaces": [
                {
                    "Association": {
                        "PublicIp": "203.0.113.25"
                    },
                    "Attachment": {
                        "AttachmentId": "eni-attach-0123456789abcdef0",
                        "DeviceIndex": 0,
                        "Status": "attached"
                    },
                    "Ipv6Addresses": [],
                    "NetworkInterfaceId": "eni-0123456789abcdef0",
                    "OwnerId": "123456789012",
                    "PrivateIpAddress": "10.0.1.10",
                    "PrivateIpAddresses": [
                        {
                            "Primary": true,
                            "PrivateIpAddress": "10.0.1.10"
                        }
                    ],
                    "SubnetId": "subnet-0123456789abcdef0",
                    "VpcId": "vpc-0123456789abcdef0"
                }
            ],
            "Placement": {
                "AvailabilityZone": "us-west-2a",
                "GroupName": "",
                "Tenancy": "default"
            },
            "State": {
                "Code": 16,
                "Name": "running"
            },
            "Tags": [],
            "VirtualizationType": "hvm"
        }
    ]
}

bo we go to the instance, we should see it is running. you can name it public-1a



WE will be doing the samr got public-1b, private-1a and private-1b

which will have the snem comand but the subnet id. it will be different.


__________________________________________

when you click on one of the instance and copy the public-ip and paste it in brwoser window.
it will display


this instance is in the subment with id: subent-07e3qr32r


connect bettwen ec2 isntances.

conenct to one of the instance taht is public1A isntance.

get the private adress of pubic1B instance - 10.0.2.25

on the console

[ec2-user@ip-10-0-1-159 ~]$ ping 10.0.2.25

this responds, it proves connectiiityi.

lets see we connect to private subent

get the private adress of private1a instance - 10.0.4.148


[ec2-user@ip-10-0-1-159 ~]$ ping 10.0.4.148

we get icmp response


and also we can check if we can conenct to that webpage:

[ec2-user@ip-10-0-1-159 ~]$ curl -s 10.0.4.148
 <center><h1>This instance is in the subnet wih ID: subent-07e3qr32r </h1></center>

we get this reponse





from this we infer that we have port 80 open and as well we were able to conenct to the instance in the 
private subnet. and the instance can connect out to the internet cause it was able to onstall the web service.
















