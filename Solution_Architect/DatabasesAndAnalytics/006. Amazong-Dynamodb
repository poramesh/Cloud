
Amazon DynamoDB

What is DynamoDB?
A fully managed NoSQL database designed for high performance and scalability.

Key Features:
Serverless with automatic scaling.
Millisecond latency for read and write operations.
Built-in security, backup, and replication.

Use Case:
A gaming leaderboard tracking scores for millions of players in real-time.

 Practice Creating DynamoDB Tables
Steps:
Go to DynamoDB in the AWS Console.
Create a table with a primary key (partition key and optional sort key).
Define read/write capacity (on-demand or provisioned).
Example:
Create a table for an inventory system with the partition key as ProductID and a sort key as Category.


DynamoDB Streams

What is DynamoDB Streams?
Captures a time-ordered sequence of changes (insert, update, delete) in a table.

Use Cases:
Trigger events (e.g., AWS Lambda) when new data is added.
Synchronize data across regions.
Example:
A chat app updating user notifications in real-time using DynamoDB Streams and Lambda.

DynamoDB Accelerator (DAX)

What is DAX?
An in-memory cache for DynamoDB that provides microsecond read performance.

Benefits:
Reduces read latency for highly accessed data.
Seamless integration with DynamoDB.

Use Case:
A food delivery app where users frequently check restaurant menus.

DynamoDB Global Tables

What are Global Tables?
Fully managed, multi-region, multi-master replication for DynamoDB tables.
Use Cases:
Build globally distributed applications with low-latency access.
Disaster recovery for critical systems.

Example:
A ticket booking system where users in different regions access the same inventory data in real-time.

Enable Global Table
Steps:
Go to the DynamoDB Console.
Select an existing table or create a new one.
Enable global replication by choosing additional regions.

Example:
Enable a global table for a travel booking platform to allow users from Asia and Europe to book flights with minimal latency
