Amazon Aurora Overview

1. Introduction to Amazon Aurora
Amazon Aurora is a database service in the Amazon RDS family, developed by AWS.
Known for high durability and scalability.
Aurora is AWS’s fastest-growing product, offering significant performance improvements over traditional databases.

2. Key Features of Aurora
Relational Database Engines: Supports MySQL and PostgreSQL.
Performance:
5x faster than MySQL.
3x faster than PostgreSQL.
Storage:
Distributed, fault-tolerant, and self-healing storage layer.
Can scale up to 128 TB per database instance.

3. Aurora Architecture
Region & Availability Zones:
Multiple availability zones within a region.
A primary database and one or more replicas within the region.
Replicas can be spread across different availability zones but always remain within the same region (Aurora replicas).
Storage Layer:
Data is replicated six times across multiple storage volumes.
Primary database handles writes; both the primary and replicas handle reads.
Fault Tolerance:
Aurora provides fault tolerance across three availability zones using a single logical volume.

4. Replicas & Scalability
Aurora Replicas:
Scale out read requests.
Can promote replicas to be the new primary database.
Up to 15 Aurora replicas.
Auto-scaling for read traffic.
Replication Type: Asynchronous with low latency (milliseconds for Aurora).
Failover:
Aurora replicas are automatic failover targets, minimizing downtime.
MySQL replicas do not automatically failover.

5. Cross-Region Replication & Other Features
MySQL Read Replicas:
Cross-region read scaling.
Up to 5 MySQL read replicas, each supporting 15 Aurora replicas.
Potential minutes of data loss in case of failover.

Global Database:
Cross-region clusters with read scaling.
Failover can occur across regions.
Only one region has the writable copy at a time.

Multi-Master:
Allows scaling of writes within a region (each Aurora instance can write).
Not yet common on the AWS exam.

Aurora Serverless:
Auto-scaling on demand.
Not always running; instantiated when traffic appears.
Does not support read replicas or public IPs.
Accessible only via VPC or Direct Connect, not VPN.

6. Comparison: Aurora Replicas vs MySQL Replicas
Feature              Aurora Replica	            MySQL Replica
Max Replicas	       15	                        5
Replication Type	   Asynchronous (low latency)	Asynchronous (higher latency)
Performance Impact	 Low	                      Higher (due to replication)
Replication Scope	   In-region	                Cross-region
Failover	           Automatic	                Manual
Data Loss in Failover	None	                    Up to minutes
Failover Target	      Yes	                      Yes

7. Other Aurora Features
Point-in-Time Recovery: Supports continuous backup to Amazon S3.
Database Compatibility: Works with both MySQL and PostgreSQL.
Automatic Failover: Aurora replicas support automatic failover, ensuring minimal downtime.
High Availability: Scale read traffic and ensure availability by using Aurora replicas.


Key Takeaways:
Amazon Aurora provides excellent scalability, fault tolerance, and performance, especially for workloads that require high availability and durability.
Aurora replicas are designed for in-region scaling, automatic failover, and low-latency replication.
Aurora Serverless offers an auto-scaling solution with on-demand instantiation




Aurora Deployment Options

1. Fault Tolerance in Aurora
Data Replication: Aurora uses six copies of the data across three availability zones within a region.
Single Logical Volume: The data is replicated across the zones into one logical volume, which is what Aurora uses to manage the database.
Writes and Reads:
Writes occur in the primary database and are replicated to other availability zones to maintain consistency.
Reads can happen from replicas in other availability zones, ensuring low latency and high availability.

2. Aurora Replicas (Within Region)
Scaling Read Requests: Aurora replicas allow you to scale out read traffic by distributing it among multiple replicas.
Replica Limit: Up to 15 Aurora replicas can be created, each with sub-10 milliseconds lag.
Independent Endpoints: Each replica has its own endpoint for application connections.
Promotion: Any Aurora replica can be promoted to a primary database at any time. You can also create a new primary from a replica.
Priority Tiers: You can set priority tiers to determine the order in which replicas are promoted.
Auto Scaling: Replicas can be added automatically based on traffic and performance needs.
Read-Only: Aurora replicas are for read-only traffic and cannot perform write operations.

3. Cross-Region Replicas(w mysql)
Replication Across Regions: Aurora allows asynchronous replication across regions (e.g., primary in one region, replicas in other regions).
Data Redundancy: Each region also has six copies of the data for fault tolerance, ensuring high availability.
Performance Impact: Cross-region replication can impact database performance due to the nature of asynchronous replication.

4. Aurora Global Database
Primary & Secondary Regions: Global Database has a primary region for reads and writes, and secondary regions where only reads happen.
Asynchronous Replication: Data is replicated asynchronously between the regions.
Read-only in Secondary: The secondary region is read-only, allowing for disaster recovery or geo-redundancy use cases.

5. Multi-Master Aurora
Active-Active or Active-Passive: Multiple database nodes can read and write at the same time within a single region (up to four read-write nodes).
Same Region: All multi-master nodes must be within the same region.
No Cross-Region Replication: It is not possible to set up multi-master nodes across different regions.
Database Restarts: Restarts on one node don’t impact others, maintaining availability.

6. Aurora Serverless
On-Demand Scaling: Aurora Serverless scales up or down automatically based on the workload, with no need for manual intervention.
Router Fleet: A fleet of routers manages incoming connections and automatically directs traffic to available database instances.
ACUs: The Aurora Capacity Unit (ACU) represents 2 GB of memory and proportional CPU. The service scales based on these units.
Use Cases:
Infrequent/Variable Workloads: Suitable for applications that have unpredictable or variable traffic patterns (e.g., big spikes followed by inactivity).
Development/Testing: Ideal for environments where database performance needs are uncertain or change frequently.
Multi-Tenant Apps: Useful in multi-tenant setups, especially when each tenant has different and unpredictable usage patterns.

Use Cases for Aurora Deployment Models:
Fault Tolerance: Applications requiring high availability with minimal data loss.
Aurora Replicas: Workloads that need to scale out reads across multiple replicas.
Global Database: Applications requiring cross-region redundancy and read-only data access in secondary regions.
Multi-Master: Workloads requiring active-active configurations with multiple writable nodes within the same region.
Aurora Serverless: Ideal for unpredictable or low-traffic applications that can benefit from on-demand scaling and cost optimization.
