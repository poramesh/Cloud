Amazon Aurora Overview

1. Introduction to Amazon Aurora
Amazon Aurora is a database service in the Amazon RDS family, developed by AWS.
Known for high durability and scalability.
Aurora is AWSâ€™s fastest-growing product, offering significant performance improvements over traditional databases.

2. Key Features of Aurora
Relational Database Engines: Supports MySQL and PostgreSQL.
Performance:
5x faster than MySQL.
3x faster than PostgreSQL.
Storage:
Distributed, fault-tolerant, and self-healing storage layer.
Can scale up to 128 TB per database instance.

3. Aurora Architecture
Region & Availability Zones:
Multiple availability zones within a region.
A primary database and one or more replicas within the region.
Replicas can be spread across different availability zones but always remain within the same region (Aurora replicas).
Storage Layer:
Data is replicated six times across multiple storage volumes.
Primary database handles writes; both the primary and replicas handle reads.
Fault Tolerance:
Aurora provides fault tolerance across three availability zones using a single logical volume.

4. Replicas & Scalability
Aurora Replicas:
Scale out read requests.
Can promote replicas to be the new primary database.
Up to 15 Aurora replicas.
Auto-scaling for read traffic.
Replication Type: Asynchronous with low latency (milliseconds for Aurora).
Failover:
Aurora replicas are automatic failover targets, minimizing downtime.
MySQL replicas do not automatically failover.

5. Cross-Region Replication & Other Features
MySQL Read Replicas:
Cross-region read scaling.
Up to 5 MySQL read replicas, each supporting 15 Aurora replicas.
Potential minutes of data loss in case of failover.

Global Database:
Cross-region clusters with read scaling.
Failover can occur across regions.
Only one region has the writable copy at a time.

Multi-Master:
Allows scaling of writes within a region (each Aurora instance can write).
Not yet common on the AWS exam.

Aurora Serverless:
Auto-scaling on demand.
Not always running; instantiated when traffic appears.
Does not support read replicas or public IPs.
Accessible only via VPC or Direct Connect, not VPN.

6. Comparison: Aurora Replicas vs MySQL Replicas
Feature              Aurora Replica	            MySQL Replica
Max Replicas	       15	                        5
Replication Type	   Asynchronous (low latency)	Asynchronous (higher latency)
Performance Impact	 Low	                      Higher (due to replication)
Replication Scope	   In-region	                Cross-region
Failover	           Automatic	                Manual
Data Loss in Failover	None	                    Up to minutes
Failover Target	      Yes	                      Yes

7. Other Aurora Features
Point-in-Time Recovery: Supports continuous backup to Amazon S3.
Database Compatibility: Works with both MySQL and PostgreSQL.
Automatic Failover: Aurora replicas support automatic failover, ensuring minimal downtime.
High Availability: Scale read traffic and ensure availability by using Aurora replicas.


Key Takeaways:
Amazon Aurora provides excellent scalability, fault tolerance, and performance, especially for workloads that require high availability and durability.
Aurora replicas are designed for in-region scaling, automatic failover, and low-latency replication.
Aurora Serverless offers an auto-scaling solution with on-demand instantiation




Aurora Deployment Options

1. Fault Tolerance in Aurora
Data Replication: Aurora uses six copies of the data across three availability zones within a region.
Single Logical Volume: The data is replicated across the zones into one logical volume, which is what Aurora uses to manage the database.
Writes and Reads:
Writes occur in the primary database and are replicated to other availability zones to maintain consistency.
Reads can happen from replicas in other availability zones, ensuring low latency and high availability.

2. Aurora Replicas (Within Region)
Scaling Read Requests: Aurora replicas allow you to scale out read traffic by distributing it among multiple replicas.
Replica Limit: Up to 15 Aurora replicas can be created, each with sub-10 milliseconds lag.
Independent Endpoints: Each replica has its own endpoint for application connections.
Promotion: Any Aurora replica can be promoted to a primary database at any time. You can also create a new primary from a replica.
Priority Tiers: You can set priority tiers to determine the order in which replicas are promoted.
Auto Scaling: Replicas can be added automatically based on traffic and performance needs.
Read-Only: Aurora replicas are for read-only traffic and cannot perform write operations.

3. Cross-Region Replicas (Aurora MySQL)
Replication Across Regions:
Primary region sends data asynchronously to replicas in other regions.
Each region has six copies of the data for redundancy.
The replication uses MySQL database engine, which can impact the performance of the primary database.

4. Aurora Global Database
Primary Region: Handles both reads and writes.
Secondary Region: Only handles reads.
Asynchronous Replication: Data is replicated asynchronously from the primary region to the secondary region.
Read-Only Secondary Region: The secondary region can only be used for read operations.
Cluster Endpoints: Applications in the secondary region can connect to the read endpoint in that region.

5. Aurora Multi-Master
Within a Region: Multiple writeable database instances within the same region.
Read and Write: All nodes can read and write to the database simultaneously.
Node Limits: Up to four read-write nodes in the same region.
Mode: Can operate in active-active or active-passive mode.
Restarting Instances: You can restart any instance without affecting other instances.

6. Aurora Serverless
On-Demand Scaling: Aurora Serverless allows you to scale capacity up or down automatically based on application demand.
No Always-On Database: The database is not running all the time; it scales up when needed and scales down when idle.
Capacity Pool: Aurora Serverless uses a pool of capacity managed by AWS.
Aurora Capacity Units (ACU):
Each ACU provides 2 GB of memory and a proportional amount of CPU.
Router Fleet: Manages connections to the database and routes them to available database instances.
Use Cases:
Ideal for infrequently used applications or those with unpredictable or variable workloads.
Good for development/test databases and multi-tenant applications.

7. Key Use Cases for Aurora Deployment Options
Infrequently Used Applications: Applications that do not require constant database availability.
Variable or Unpredictable Workloads: Applications that experience spikes in traffic or have fluctuating demand.
Development and Test Databases: Cost-effective for development environments where database usage varies.
Multi-Tenant Applications: Managing databases for applications that serve multiple clients or customers.

These deployment options and use cases make Aurora a versatile and efficient solution for managing both high-performance and cost-effective databases 
across different types of workloads.

