

^^^^^^
a lil bit about root volume.

**it is basically created by the ami snapshot !**

When you create an EC2 instance in AWS, a default Elastic Block Store (EBS) volume is attached to the instance. This default 
volume is called the root volume. Here's a detailed explanation:

What is the Root Volume?
The root volume is the primary storage device attached to an EC2 instance, used to store the operating system and boot 
files necessary to start the instance.

Why is it Called the Root Volume?

Root Filesystem:
The root volume contains the root filesystem (/ in Linux or C:\ in Windows) of the operating system.
It is the location where the operating system and all system-critical files reside, enabling the instance to boot and operate.

Default and Primary Storage:
It is the first storage volume attached to the instance during creation and is essential for the instance's operation.
Purpose of the Root Volume

Booting the Instance:
The root volume contains the Amazon Machine Image (AMI), which includes the operating system and any pre-installed applications or settings.
When the instance starts, the OS and kernel are loaded from this volume.

Operating System Files:
Stores the OS files, libraries, and drivers required to manage the instance and execute processes.

User Data and Applications:
The root volume can also store user data, applications, or configurations, but it's recommended to use additional volumes for these to keep the root volume clean and optimized.


Characteristics of the Root Volume

Size and Type:
The default size and type of the root volume depend on the selected AMI.
Example: An Amazon Linux 2 AMI might come with an 8 GiB root volume of the gp2 or gp3 EBS type.
You can increase the size or change the volume type during instance creation or later.

EBS Volume Properties:
The root volume is persistent storage.
If the instance is stopped, the data on the root volume remains intact.

Default Behavior on Termination:
By default, the root volume is deleted when the instance is terminated. However, this behavior can be modified
by disabling the Delete on Termination flag.


What Does the Root Volume Do?
Booting:
It stores the bootloader, kernel, and OS required to start the EC2 instance.

System Files and Configuration:
Contains all the files and configurations required for the operating system.

User Data Execution:
When launching an EC2 instance, user data scripts (such as initialization scripts) are executed from the root volume.

Custom AMIs:
If you create a custom AMI from an existing instance, the root volume's contents are used to define the custom image.

How is the Root Volume Created?
From an AMI:
The root volume is created based on the Amazon Machine Image (AMI) you select when launching the instance.

The AMI defines:
The operating system (e.g., Linux, Windows).
Pre-installed software or configurations.
Default root volume size and type.

Attached Automatically:
AWS automatically attaches the root volume to the instance during creation.

What Happens Without a Root Volume?
An instance cannot boot without a root volume, as it lacks the operating system and boot files.
Think of the root volume as the equivalent of a computer's hard drive containing the OS.


Best Practices for Root Volumes
Resize if Needed:
Ensure the root volume is large enough for your operating system and any additional software you plan to install.

Separate Data:
Avoid storing critical application data or files on the root volume. Use additional EBS volumes or S3 for this purpose.

Backup:
Regularly take snapshots of the root volume to create a backup of your instance.








^^^^
a lil bit about loop back and non loop back devices.




What is a Block Device?

A block device is a type of storage device that provides data in fixed-size blocks. Examples include hard drives, SSDs, 
and virtual devices. Block devices support reading and writing operations at specific
offsets, making them ideal for use with filesystems.

Loopback Devices
Definition:
A loopback device is a virtual block device that maps a regular file (such as a .img file) as if it were a physical block
device. This allows the file to act as a virtual disk, enabling the creation of filesystems and the storage of data within it.

How It Works:
A regular file (e.g., mydisk.img) on a physical disk is used.
The file is associated with a loopback device (e.g., /dev/loop0).
The operating system treats /dev/loop0 as a block device.
You can format /dev/loop0, mount it, and interact with it as if it were a physical disk.

Use Cases:
Disk Image Files:
Used in virtualization (e.g., disk images for virtual machines like .qcow2 or .vmdk).
Testing Filesystems:
Allows you to test a filesystem setup without using an actual physical disk.
Container Storage:
Used by Docker for storing data in a copy-on-write layer.
Backup Archives:
Create snapshots of filesystems that can be mounted later.

Example:

***cat /dev/zero
It will keep outputting zeros to the terminal indefinitely until you stop the command (e.g., using Ctrl+C). If you limit it to a 
specific amount of data, it can be used for various purposes, like filling a file or wiping a disk.
Why is /dev/zero Useful?
Wiping data: It can be used to securely wipe data by overwriting it with zeros.
Creating large empty files: It allows you to quickly create large files filled with zeros for testing or as placeholders.
***



Create a disk image file:
dd if=/dev/zero of=mydisk.img bs=1M count=100
of=mydisk.img: The output file, which will be your disk image.
bs=1M: Block size of 1 MB.
count=100: Creates a 100 MB file and This will create the disk with zeros.

Associate it with a loopback device:
sudo losetup /dev/loop0 mydisk.img

Format the loopback device:
mkfs.ext4 /dev/loop0

Mount the device:
sudo mount /dev/loop0 /mnt
Use /mnt as if it were a physical disk.

Create Files Inside It:
Now, you can create files and directories in the mounted loop device.
sudo touch /mnt/example_file.txt
sudo mkdir /mnt/example_dir

Unmount and Detach the Loop Device:
When done, unmount and detach the loop device.
sudo umount /mnt
sudo losetup -d /dev/loop0




Non-Loopback Devices
Definition:
A non-loopback device refers to actual physical block devices such as HDDs, SSDs, USB drives, or other hardware storage
devices directly attached to the system. These devices are accessed directly via their corresponding device nodes (e.g., /dev/sda, /dev/nvme0n1).

Characteristics:
Represents real hardware.
Provides persistent storage unless explicitly removed or erased.
Does not require a mapping step (like loop devices do).

Use Cases:
System Boot:
The root volume of a system is usually stored on a physical disk.
Permanent Storage:
Used to store operating system files, user data, and backups.
RAID Configurations:
Physical disks are combined to provide redundancy and performance.

Example:
View connected physical devices:
lsblk

Output:
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda       8:0    0  500G  0 disk
└─sda1    8:1    0  500G  0 part /

Format a physical device:
mkfs.ext4 /dev/sda1

Mount the device:
sudo mount /dev/sda1 /mnt



********
Use /dev/sda1 when working with a specific partition.
Use /dev/sda when working with the whole disk (and only if necessary).
Tools like lsblk help you identify the structure of your disk and partitions before performing operations.
***********

Key Differences
Aspect	               Loopback Device              	           Non-Loopback Device
Type	          Virtual (maps a file to a block device).	       Physical (actual hardware storage).
Persistence	    Depends on the underlying file.	                 Data is persistent unless the physical device fails.
Use Case	      Testing, virtual disks, and backup archives.   	 Operating system storage, user data, RAID, etc.
Setup	          Requires a file and loopbck asociatn(losetup).	 Directly available as a hardware device.
Examples	      /dev/loop0, /dev/loop1.                        	/dev/sda, /dev/nvme0n1, /dev/sdb.


Summary
Loopback Devices: Simulate block devices using regular files. Ideal for testing, virtualization, and temporary storage solutions.
Non-Loopback Devices: Represent real hardware used for persistent data storage in production systems.

Monitor Size:
Keep an eye on the root volume's storage utilization to avoid performance issues.





^^^^^^^^^^^^^^^^^^




FINALLY INTO THE PRACTICALLLLLITYYY>>>>


# Amazon EBS Volume Lab

## Launch Instances in two AZs

1. Launch an instance using the Amazon Linux AMI in us-east-1a
2. Launch another instnace using the Amazon Linux AMI in us-east-1b

## Create and Attach an EBS Volume
1. Create a 10GB gp2 volume in us-east-1a with a name tag of 'data-volume'
2. List non-loopback block devices on instance
sudo lsblk -e7
3. Attach the volume to the instance in us-east-1a
4. Rerun the command to view block devices

## Create a filesystem and mount the volume
1. Create a filesystem on the EBS volume
sudo mkfs -t ext4 /dev/xvdf
2. Create a mount point for the EBS volume
sudo mkdir /data
3. Mount the EBS volume to the mount point
sudo mount /dev/xvdf /data
4. Make the volume mount persistent
Run: 'sudo nano /etc/fstab' then add '/dev/xvdf /data ext4 defaults,nofail 0 2' and save the file

## Add some data to the volume

1. Change to the /data mount point directory
2. Create some files and folders

## Take a snapshot and move the volume to us-east-1b

1. Take a snapshot of the data volume
2. Create a new EBS volume from the snapshot in us-east-1b
3. Mount the new EBS volume to the instance in us-east-1b
4. Change to the /data mount point and view the data










Here's a detailed summary of the steps and concepts covered in your lesson about working with Amazon EBS (Elastic Block Store) volumes:


Step-by-Step Guide

Launching EC2 Instances:
Two EC2 instances are launched in different Availability Zones (US East 1A and US East 1B).
Instance 1 is named "one A" and is launched in AZ "US East 1A."
Instance 2 is named "one B" and is launched in AZ "US East 1B."
These instances are launched without a key pair (just for demonstration purposes).
Security groups are configured with basic web access.

Creating an Additional EBS Volume:
Navigate to the Elastic Block Store (EBS) section in the AWS console.
Select Volumes, then click Create Volume.
Choose the appropriate Availability Zone (make sure it matches the instance’s AZ).
Choose Volume Type (e.g., GP3 for General Purpose SSD).
Specify the Size (10GB in this case) and IOPS (Input/Output Operations per Second).
Create the volume, which will be in the "available" state once ready.

Attaching the EBS Volume to Instance A (US East 1A):
After the volume is ready, go to the Volumes section and select the new volume.
Click Actions > Attach Volume.
Choose the EC2 instance in US East 1A and specify a device name dev/sdf or somethinh.
Attach the volume.
On Instance A, run the command sudo lsblk -E 7 to see the non-loopback block devices. After attaching, the new volume should appear.


Here’s what sudo lsblk would list on Instance A after you attach a new EBS volume:

NAME: The name of the block device (e.g., xvda, xvdf).
MAJ:MIN: Major and minor device numbers.
RM: Whether the device is removable (1 if removable, 0 if not).
SIZE: The size of the device (e.g., 10G for a 10GB volume).
RO: Whether the device is read-only (0 if it is writable, 1 if it is read-only).
TYPE: The type of device, such as disk (for physical disks) or part (for partitions).
MOUNTPOINT: Where the device is mounted in the filesystem (e.g., /, /data, or blank if not mounted).


Before attaching the new EBS volume, the output might look like this:


NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
xvda    202:0    0   8G  0 disk /
This shows that there’s one block device (xvda) which is the root volume with a size of 8GB.

After you attach the new 10GB EBS volume (/dev/xvdf), the output might look like this:

NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
xvda    202:0    0   8G  0 disk /
xvdf    202:80   0  10G  0 disk

******
What Influences Volume Naming?
Root Volume (xvda): The first attached volume is typically the root device, automatically given xvda.
Additional Volumes: Any additional volumes are given sequential names (xvdb, xvdc, etc.), based on the order in which they are attached to the instance.
NVMe Devices (for newer EC2 instances): In newer EC2 instance types (like those using NVMe SSDs), the naming convention might differ (e.g., /dev/nvme0n1, /dev/nvme1n1), 
but this can vary depending on the instance type and the EBS volume configuration.
In summary, the naming of these devices (xvda, xvdf, etc.) is automatically done by the system, and the names are assigned based on the order
of attachment and the root volume's status.
********

Creating a File System on the EBS Volume:

Run the following commands to set up the file system:
sudo mkfs.ext4 /dev/xvdf (Format the volume with the EXT4 file system). //we dont really have to do this when we create a volume from snapshot again
Create a mount point: sudo mkdir /data.
Mount the volume: sudo mount /dev/xvdf /data.
Make the mount persistent by editing the /etc/fstab file, adding a line with the device and mount point info, so the volume is automatically mounted after instance restarts.
Run: 'sudo nano /etc/fstab' then add '/dev/xvdf /data ext4 defaults,nofail 0 2' and save the file

^^^^^^^^
commandd sudo mkfs.ext4 /dev/xvdf formats the newly attached EBS volume (/dev/xvdf) with the EXT4 filesystem.

sudo: This runs the command with superuser (root) privileges, which is required to format a disk or perform other administrative tasks.

mkfs.ext4:

mkfs stands for Make File System.
ext4 is the fourth extended filesystem, which is one of the most commonly used file systems on Linux. It's known for being reliable, fast,
and providing features like journaling, which helps in recovering data in case of system crashes.

/dev/xvdf: This specifies the device (in this case, the new EBS volume) that you want to format. When you attach a new EBS volume to your instance, 
it appears as a device like /dev/xvdf (or /dev/nvme1n1 depending on the instance type and EBS volume configuration).

What Does It Do?
The command formats the specified volume (/dev/xvdf) with the EXT4 filesystem, meaning it prepares the disk to store data in a w
ay that Linux can efficiently read and write to it.
All data on the volume will be erased during formatting, and the volume will be prepared for use as a new disk.


and

By adding this line to the fstab file, you are configuring the system to:

'sudo nano /etc/fstab' then add '/dev/xvdf /data ext4 defaults,nofail 0 2' and save the file, ctrl x and y done
when you do nnano there iwll be some commands in it already, and this is extra that u add.
if you cat /etc/fstab you should see the entry.

Automatically mount the volume (/dev/xvdf) to the /data directory every time the instance boots.
Use the ext4 file system on that volume.
Continue the boot process even if the volume cannot be mounted (thanks to the nofail option).

and 
in windows mounitng is like c drive d drive
^^^^

Adding and Verifying Data:

Create test data in the mounted volume:
sudo touch /data/testfile.txt
sudo mkdir /data/myfolder
Verify the data using ls /data.


Taking a Snapshot of the Volume:
Navigate to Volumes and select the attached volume.
Click Actions > Create Snapshot and give it a name (e.g., "data snap").
Snapshots are stored in Amazon S3 and are regionally available, allowing you to create new volumes from snapshots in any Availability Zone.

Creating a New Volume from Snapshot:
Go to Snapshots, select the snapshot you just created, and choose Create Volume.
Specify the size, volume type (e.g., GP3), and the Availability Zone (choose US East 1B).
Once the volume is created in AZ 1B, it will be available for attachment to an instance in that AZ.

Attaching the New Volume to Instance B (US East 1B):
After the new volume is created, go to Volumes and select it.
Click Actions > Attach Volume and choose Instance B in AZ 1B.
Connect to Instance B and verify the attached volume with sudo lsblk -E 7.

Mounting the Volume on Instance B:
On Instance B, create the mount point: sudo mkdir /data.
Mount the volume: sudo mount /dev/xvdf /data.
Verify that the same data from Instance A (created earlier) is visible on Instance B.

Making the Mount Persistent on Instance B:
Optionally, edit the /etc/fstab file on Instance B to make the mount persistent.

Clean-Up:
Once the exercise is complete, terminate the EC2 instances.
Delete the EBS volumes that were created (remember, volumes not attached to instances need to be manually deleted).
Optionally, delete the snapshot to avoid unnecessary costs.

Key Concepts Covered:
EBS Volumes: These are block-level storage devices that can be attached to EC2 instances. They are persistent, meaning data remains available even if the instance is stopped or terminated.
Snapshots: A snapshot is a point-in-time backup of an EBS volume. Snapshots are stored in Amazon S3 and can be used to create new volumes.
Availability Zones (AZs): EBS volumes are tied to specific Availability Zones, but snapshots are region-wide and can be used to create volumes in any AZ.
Attaching and Mounting Volumes: You can attach EBS volumes to EC2 instances and mount them using a file system (e.g., EXT4) to store data.
Persistence of Data: By editing the /etc/fstab file, you can ensure that volumes are automatically mounted when an instance is rebooted.

Important Considerations:
Availability Zone Constraints: EBS volumes can only be attached to instances in the same Availability Zone.
Volume Types: There are various volume types like GP3, IO1, and Cold HDD, each offering different performance characteristics. 
The default choice in the lesson is GP3.
Snapshots and Region Availability: While EBS volumes are tied to an AZ, snapshots are region-wide, meaning they can be used
across multiple Availability Zones in the same region.







EBS SNAPSHOT AND AMIs



Objective:
The lesson focuses on creating and using custom AMIs to launch identical instances and how to work with associated snapshots.

Steps Overview:

Launch an EC2 Instance with User Data:
User Data: A script or set of commands that is executed during the initial boot-up of the instance. In this case, the user data script installs 
a web server and creates a simple webpage with CSS styling.

#!/bin/bash

# Update the system and install Apache web server
yum update -y
yum install -y httpd

# Start and enable Apache to run on boot
systemctl start httpd
systemctl enable httpd

# Create an index.html file with CSS animations for background color changing
cat > /var/www/html/index.html <<'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Custom AMI Instance</title>
    <style>
        @keyframes backgroundChange {
            0% { background-color: #6495ED; }
            50% { background-color: #ADD8E6; }
            100% { background-color: #6495ED; }
        }

        body {
            color: white;
            font-size: 48px;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            animation: backgroundChange 4s infinite;
        }
    </style>
</head>
<body>
    <div>This Instance Was Launched from a Custom AMI</div>
</body>
</html>
EOF

# Ensure the httpd service is correctly set up to start on boot
chkconfig httpd on

**************
cat > /var/www/html/index.html <<'EOF'
cat: Normally used to display the contents of a file, but when used with redirection (> or >>), it can write content to a file.
>: This operator is used for output redirection. It tells cat to write to the file (/var/www/html/index.html) instead of displaying the content to the screen.
<<'EOF': This is a here document (also called "heredoc"). It allows you to provide multiple lines of text as input to a command. Everything between <<'EOF'
and the next occurrence of EOF will be treated as input to the cat command.

EOF is just a marker for the start and end of the content. You can use any word (like END or CONTENT), but EOF is common practice.


cat here is used not for viewing but for creating the file.
The <<'EOF' construct is used to supply multiple lines of input directly into a file.
This is a quick way to create a file with content, similar to using a text editor like nano, but it's done directly in the terminal.

Example Usage:

cat > /var/www/html/index.html <<'EOF'
<html>
  <head><title>My Website</title></head>
  <body><h1>Hello, World!</h1></body>
</html>
EOF

This will create the index.html file with the HTML content provided. After this, you can view the file's contents or use it on your web server.******************

*************

Access the EC2 Console:

Launch an EC2 instance in the default availability zone.
Add the user data script to customize the instance (install a web server and configure it).
Use the web access security group, ensuring port 80 (HTTP) is open.
After the instance is running, confirm you can access the web server using the public IP of the instance in a browser.

Create an AMI (Amazon Machine Image):

Once the instance is set up and configured, go to the EC2 dashboard.
Under the Actions menu for the instance, select Create Image to create an AMI.
Name the AMI (e.g., "Custom Web Server").
Snapshot: A snapshot of the root volume is taken as part of the AMI creation.
The snapshot will be visible under Snapshots in the Elastic Block Store (EBS) section.
AMIs are regional (available across any availability zone within the same region, not across regions).
Snapshots are also regional because they are stored in S3.


*****Yes, when you create an Amazon Machine Image (AMI) from an EC2 instance, a snapshot of the instance's root volume
(and any additional EBS volumes) is automatically created in the background. This snapshot serves as a
backup of the instance's disk at the time the AMI is created, preserving the exact
configuration, data, and system state.******

Launch New Instances from the Custom AMI:

To launch new instances using the created AMI:

Go to AMIs under Images.
Select the custom AMI (e.g., "Custom Web Server").
Click Launch to create new instances from this image.
Choose a different availability zone (e.g., us-east-1a) to ensure the web server runs in a new zone.

Result:

The new instance will be identical to the original because it was created from the same AMI, including the installed web server and configuration.
You can check the public IP of the new instance to verify the identical web server is running.

Copying AMIs Between Regions:
If needed, you can copy the AMI to another AWS region:
In the AMI section, select the AMI, click on Actions, and select Copy AMI.
Choose a new region and decide if you want to encrypt the AMI.


Deregister and Delete AMIs and Snapshots:
After completing the work, you can terminate the instances.


To clean up:
Deregister the AMI: Go to AMI > select the AMI > Actions > Deregister. Deregistering removes the AMI from the list of available images.
Delete the snapshot: After deregistering the AMI, locate the associated snapshot under Snapshots, and delete it to remove the underlying data.

Key Concepts:
User Data: Scripts that automate configuration tasks (e.g., installing software, configuring services) when launching an instance.
Custom AMI: A customized image that can be used to launch identical instances, often including pre-configured applications or services.
Snapshots: Backups of EBS volumes that are used to create new AMIs or volumes. They are stored in Amazon S3.
Regional Availability: Snapshots and AMIs are region-specific, so they can't be directly used in other regions unless copied over.
EBS Volumes: Data storage volumes attached to EC2 instances. AMIs can create snapshots of these volumes.


Final Thoughts:
Creating custom AMIs and using snapshots allows you to quickly replicate EC2 instances with identical configurations, 
saving time and ensuring consistency across environments. You can also copy AMIs across regions, enabling the use of the
same configurations in different geographic locations. Cleaning up by deregistering AMIs and deleting snapshots 
ensures efficient resource management in AWS.






