AWS CloudFormation

AWS CloudFormation is an Infrastructure as Code (IaC) tool that automates the provisioning and management of AWS resources using template files.
Purpose:
Allows developers to define, deploy, update, and manage AWS infrastructure in a consistent, repeatable way.
Comparison:
Similar to HashiCorp Terraform but designed specifically for AWS.

  
Key Features and Benefits

Declarative Syntax:
Define infrastructure using JSON or YAML templates.
Templates describe resources (e.g., VPCs, Auto Scaling Groups, Elastic Load Balancers).

Automation and Reusability:
Reuse templates across multiple deployments to ensure consistency and reduce human error.

Rollbacks:
Automatically deletes resources when a stack is deleted.
Ensures a clean removal of resources and rollback on deployment failures.

  
  
Core Components of AWS CloudFormation

Template Files:
Define the desired AWS environment in JSON or YAML.
Includes resource configurations, parameters, and conditions.

Stacks:
Represents the entire deployed environment described by a template file.

Lifecycle:
Create: Deploy resources described in the template.
Update: Modify existing resources by supplying an updated template.
Delete: Removes all resources associated with the stack.

Stack Sets:
AWS CF stacksets extends the functionality of staacks by enabling you to create, update, or deelete stacks across 
multiple accounts and regions with a single operation

Change Sets:
Allows previewing of changes to a stack before deployment.
Highlights differences between the deployed infrastructure and the updated template.
Prevents unintended changes by enabling review before implementation.

  
  
Process of Using AWS CloudFormation
Create a Template File:
Define resources and configurations using JSON or YAML.

Deploy a Stack:
Upload the template to CloudFormation.
CloudFormation provisions resources based on the template definition.

Update a Stack:
Modify the template file to include changes or new resources.
Use Change Sets to preview updates before applying them.

Delete a Stack:
Automatically removes all resources created by the stack.



Benefits of AWS CloudFormation
Consistency and Reliability:
Reduces human error by automating resource creation and updates.
Ensures uniformity across deployments.

Simplified Management:
Manage entire infrastructure as a single entity using stacks.

Preview Changes:
Use Change Sets to review and validate changes before implementation.

Multi-Account and Multi-Region Management:
Stack Sets allow centralized management across multiple environments.

Summary of Key Terms
Term               	Description
Template	    JSON or YAML file defining AWS resources and their configurations.
Stack	        Deployed resources as described in a CloudFormation template.
Stack Set	    Extends stack functionality for managing resources across multiple accounts and regions.
Change Set	  Preview of changes between deployed infrastructure and the updated template.
Rollback	    Automatic deletion of resources in case of stack creation or update failure.




HANDS ON LESSON



AWS CloudFormation is an Infrastructure as Code (IaC) service that automates the provisioning and management of AWS resources using templates.

CloudFormation Components:
Stack: A collection of AWS resources managed as a single unit.
Template: A JSON or YAML file that defines the resources and their configurations.
Change Set: A preview of proposed changes to a stack, showing what will be created, updated, or deleted.


Steps to Work with CloudFormation Stacks

1. Create a Stack:
Navigate to AWS CloudFormation in the AWS Management Console.
Choose to create a stack and upload a pre-defined YAML/JSON template.
Provide a stack name and optional parameters.
Submit the stack and monitor the progress in the Events tab.

2. Update a Stack:
Use a Change Set to update an existing stack.
Replace the current template, preview the changes, and execute the change set to apply updates.

3. Delete a Stack:
Deleting a stack removes all associated resources, adhering to any deletion policies defined in the template.



Example Walkthroughs

1. Creating an EC2 Instance with a Security Group

AWSTemplateFormatVersion: '2010-09-09'
Description: Create an EC2 instance with a security group for SSH access
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0440d3b780d96b29d
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref InstanceSecurityGroup

Template Details:
Defines a security group for SSH access (port 22).
Creates an EC2 instance and attaches the security group.

Key Points:
Security group uses an ingress rule allowing traffic from 0.0.0.0/0 (all IPs).
Update the template with the latest AMI ID before deployment.

Monitoring:
Check the Events tab for progress.
Verify the instance and security group in the EC2 dashboard.

2. Updating the Stack to Add an EBS Volume

AWSTemplateFormatVersion: '2010-09-09'
Description: Attach an EBS volume to the EC2 instance, retaining original resources
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0440d3b780d96b29d
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref InstanceSecurityGroup
  MyVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt MyInstance.AvailabilityZone
      Size: 10
  MyVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MyInstance
      VolumeId: !Ref MyVolume
      Device: /dev/sdf

Template Updates:
Adds an EBS volume (10 GB) to the EC2 instance.

Process:
Use a Change Set to preview changes before updating the stack.
Ensure the volume's availability zone matches the instance’s zone.

Monitoring:
Verify the volume attachment in the EC2 console under the Storage tab.


3. Updating the Stack to Add an S3 Bucket

AWSTemplateFormatVersion: '2010-09-09'
Description: Add an Amazon S3 bucket to the setup, retaining all previous resources

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0440d3b780d96b29d  # Ensure this AMI ID is valid for your region
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref InstanceSecurityGroup

  MyVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt MyInstance.AvailabilityZone
      Size: 10

  MyVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MyInstance
      VolumeId: !Ref MyVolume
      Device: /dev/sdf

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-unique-bucket-name-4rw3dda34  # Ensure this is globally unique

Template Updates:
Adds an S3 bucket for application logging.

Key Points:
Ensure the bucket name is unique (e.g., append random characters).

Process:
Use a Change Set to preview and execute the changes.

Verification:
Check the new bucket in the S3 console.


Important Notes

Template Best Practices:
Use YAML for easier readability.
Reuse and modify existing templates to save time.
Validate templates before deploying.

Intrinsic Functions:
Ref Function: References other resources within the template.
Used for attaching the security group to the EC2 instance and ensuring the EBS volume matches the instance's zone.

Deletion Policies:
Configure deletion policies in the template to retain specific resources (e.g., S3 buckets) after the stack is deleted.

Order of Deletion:
CloudFormation deletes resources in a specific order to ensure dependencies are respected (e.g., volumes are deleted before instances).

Error Handling:
If a resource fails to create or delete, the stack rolls back to its previous state or stops with an error. Review the Events tab for troubleshooting.



Action                 	Key Steps
Create a Stack	        Upload template → Provide stack name → Submit → Monitor progress in Events tab.
Update a Stack	        Use a Change Set → Preview changes → Execute Change Set → Verify updates in the AWS console.
Delete a Stack	        Initiate deletion → Monitor progress in Events tab → Ensure all resources are removed successfully.
Key Intrinsic Functns	  Ref (resource references), Fn::GetAtt (resource attributes).
Template Types	        YAML (preferred for readability) or JSON.
Best Practices	        Validate templates, use the latest AMI, ensure unique S3 bucket names, and configure deletion policies.

  





Nested Stack:

Definition:
A nested stack is a stack created as a resource within another CloudFormation stack using the AWS::CloudFormation::Stack resource.

Parent Stack (Top-Level Stack):
This stack includes a resource of type AWS::CloudFormation::Stack that refers to another CloudFormation template (for the nested stack).

Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/mybucket/vpc.yaml

Child Stack (Nested Stack):
The vpc.yaml template referenced in the parent stack creates resources such as a VPC.

**The phrase "another CloudFormation stack" simply means that a nested stack (child) is treated as a subcomponent (resource) of a parent stack.***


Purpose:
Allows splitting a large, complex infrastructure into smaller, reusable components (e.g., separate VPC and subnets).

Structure:
Main template (top-level): References other templates (VPC, Subnet1, Subnet2).
Nested templates: Individual templates for specific resources.


# Created Nested Stack using the AWS CLI


************

Why is VPC under EC2?
Historically, the EC2 service included both compute (instances) and networking features. Over time, AWS introduced separate services 
for networking, like VPC, but these resources remained under the EC2 namespace for consistency and backward compatibility.

Examples of EC2 Namespace Resources:

Here are a few resources under the AWS::EC2 namespace:
AWS::EC2::Instance: For creating EC2 instances.
AWS::EC2::VPC: For creating Virtual Private Clouds.
AWS::EC2::Subnet: For creating subnets within a VPC.
AWS::EC2::RouteTable: For defining route tables.
AWS::EC2::SecurityGroup: For configuring security groups.

Key Takeaway:
The presence of AWS::EC2::VPC doesn't mean you're creating EC2 instances. It simply reflects that VPC is 
part of the EC2 namespace in AWS CloudFormation.


and 

Defining the Parameter
When you define a parameter like this in a CloudFormation template:
Parameters:
  VpcId:
    Type: String
This simply sets up a placeholder for the VpcId that must be provided when creating or updating the stack.
it acts as an input parameter that you or the system must provide when deploying the CloudFormation stack. 


and 

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC

During Stack Creation:

When CloudFormation processes the Resources section, it creates the VPC using the properties specified (e.g., CidrBlock, EnableDnsSupport, etc.).
AWS assigns a unique ID to the created VPC, such as vpc-0abcd1234efgh5678.
When !Ref VPC is Used:

The !Ref function fetches the VPC's ID from the created resource.
This ID is then assigned to the VpcId output.
Output Section:

The VpcId output includes the retrieved VPC ID as its value, making it available for other stacks, external systems, or users who query the stack.

If the VpcId needs to be referenced by another stack (e.g., in a nested stack setup), you must define it in the Outputs section. Outputs make 
it possible to export values from one stack and import them into another using Fn::ImportValue.

****************

1. Create a file named vpc.yaml with the following content

```yaml
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: NestedStackVPC
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
```

2. Create a file named subnet1.yaml with the following content

```yaml
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: String
Resources:
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: NestedStackSubnet1
Outputs:
  Subnet1Id:
    Description: Subnet 1 ID
    Value: !Ref Subnet1
```

3. Create a file named subnet2.yaml with the following content

```yaml
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: String
Resources:
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: NestedStackSubnet2
Outputs:
  Subnet2Id:
    Description: Subnet 2 ID
    Value: !Ref Subnet2
```

4. Upload the vpc.yaml, subnet1.yaml, and subnet2.yaml files to an S3 bucket and retrieve the URLs

aws s3 cp <file-name> s3://<bucketname>

aws s3api list-objects --bucket my-cloudformation-s3-bucket-3121s2 --query "Contents[].{Key: Key}" --output text | awk '{ print "https://my-cloudformation-s3-bucket-3121s2.s3.amazonaws.com/" $1 }'

5. Create a file named main.yaml with the following content (replace your-bucket-name with the name of the S3 bucket where you uploaded the templates)

```yaml
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://my-cloudformation-s3-bucket-3121s2.s3.amazonaws.com/vpc.yaml

  Subnet1Stack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://my-cloudformation-s3-bucket-3121s2.s3.amazonaws.com/subnet1.yaml
      Parameters:
        VpcId: !GetAtt VPCStack.Outputs.VpcId

  Subnet2Stack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://my-cloudformation-s3-bucket-3121s2.s3.amazonaws.com/subnet2.yaml
      Parameters:
        VpcId: !GetAtt VPCStack.Outputs.VpcId
```

7. Deploy the main stack using the AWS CloudFormation CLI

aws cloudformation create-stack --stack-name NestedStackExample --template-body file://main.yaml --capabilities CAPABILITY_NAMED_IAM

8. The stack can be deleted with the following command

aws cloudformation delete-stack --stack-name NestedStackExample
