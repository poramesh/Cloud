Notes on Elastic Beanstalk and Platform as a Service (PaaS)


1. Infrastructure as a Service (IaaS) vs. Platform as a Service (PaaS):

IaaS: Examples include Amazon EC2. You manage everything from the operating system (OS) upwards:
Install and update OS patches.
Harden the OS for security.
Install and manage runtime environments (e.g., Java, Python).

PaaS: Examples include Elastic Beanstalk. AWS handles infrastructure, OS, and runtime setup. Developers only focus on writing and deploying code.


2. Elastic Beanstalk Overview:

A PaaS solution for deploying and managing applications.
Developers:
Write code.
Package it as a ZIP file.
Upload it to Beanstalk.

Beanstalk automates:
Resource provisioning (e.g., EC2 instances, load balancers, auto-scaling groups).
Configuration management.
Environment setup.

Key Benefit: Developers avoid operational overhead while still having optional access to the OS for debugging or special configuration.

3. Workflow:

Developer uploads source code (ZIP file) to Elastic Beanstalk.
Beanstalk creates an environment to host the application:
Automatically provisions AWS resources (e.g., EC2 instances, load balancers).
Configures resources for deployment.
Developers choose the VPC, subnets, and availability zones, while Beanstalk handles the rest.


4. Supported Platforms:

Beanstalk supports many platforms, including:
Java, .NET, Node.js, PHP, Ruby, Python, Go, and Docker.
It uses underlying AWS services like:
EC2, Elastic Load Balancing (ELB), and Auto Scaling.


5. Elastic Beanstalk Components:

Application:
Contains: Environments. Environment configurations. Application versions.
Applications can hold multiple versions of the code for rollbacks or upgrades.

Application Versions:
Each version references a deployable section of code.
Stored in an S3 bucket for easy retrieval and management.
Multiple environments (e.g., development and production) can use different versions of the same application.

Environment:
An application version deployed on AWS "resources".
Beanstalk provisions and manages these resources.
Example: Auto Scaling group, EC2 instances, load balancers.
Versions of code can be swapped, rolled back, or updated.


6. Web Servers vs. Worker Environments:

Web Servers:
Handle incoming HTTP/HTTPS requests.
Deployed behind load balancers.
Used for real-time, user-facing tasks (e.g., serving webpages or APIs).

Worker Environments:
Handle background processing tasks.
Poll messages from an Amazon SQS queue (Simple Queue Service).
Process long-running tasks (e.g., batch processing, order fulfillment).

Example Workflow with Web Server and Worker Environments:

User makes a request to the web server (e.g., places an order).
Web server places a message in an SQS queue.
Worker polls the queue, retrieves the message, and processes it.


&&&&&&&&&&&&&&&&&
Perhaps people are submitting some kind of order.
For example, if it's some kind of e-commerce application,
then the workers might take some information that's been placed into a queue
by the web server and perform some kind of processing on that information.
And so when we have long running tasks, things that are gonna take time,
we wanna offload that from the web servers and that's where the workers come in.
So let's have a look at how this works here.

We've got a worker environment and a web server environment
user hits the web servers places some kind of order, for example,
and then information about that in that order or that
request is put into an SQSQ by the web server.
So the web servers placed a message in the queue.
The worker is polling the queue
and it finds the message and then processes that message.
So that's the difference between web servers and workers.
And you get to choose which one you wanna deploy when you create your environment.
&&&&&&&&&&&&&&&&&&&



7. Elastic Beanstalk Management:

Provides a UI for monitoring and managing application health.
Handles platform updates, ensuring software and patches remain up-to-date.
Allows configuration of environments, including scaling and load balancing settings.

Conclusion: Elastic Beanstalk simplifies application deployment and management by abstracting infrastructure complexities while still providing 
flexibility for developers who need low-level access.




hands on lesson::


Detailed Notes: How to Create an AWS Elastic Beanstalk Application

1. Purpose of Elastic Beanstalk

Elastic Beanstalk (EB) is a Platform as a Service (PaaS) solution that simplifies deploying and managing web applications.
It abstracts the provisioning and management of the underlying infrastructure, allowing developers to focus solely on their applications.
Key use cases include web server environments for frontend applications and worker environments for processing background tasks.



2. Key Components in Elastic Beanstalk

Application:
The top-level entity in Beanstalk.
It contains environments, configurations, and application versions.
You must create an application before deploying environments.

Environment:
Represents an application version deployed to AWS resources.

Types:
Web Server Environment: Handles HTTP/HTTPS requests (e.g., for websites).
Worker Environment: Handles background tasks via Amazon SQS (queues for processing tasks).

Application Versions:
Each application version is a reference to deployable code stored in an S3 bucket.
Multiple versions allow rolling back to previous releases or testing new versions.


3. Creating an Elastic Beanstalk Application

Navigate to Elastic Beanstalk in the Management Console:
Elastic Beanstalk allows running and managing web apps without provisioning infrastructure.

Create an Application:
Define the application name (e.g., MyEBWebsite).
Elastic Beanstalk will automatically create a default environment name for you.
Optional: Add a custom domain name or use the default.

Choose Platform:
Select from supported platforms (e.g., Node.js, Java, Python, .NET, Docker, etc.).
For the demo, the sample application (pre-built code) is used for simplicity.

Deployment Options:
Single Instance:
Deploys one instance (suitable for free-tier use or low traffic).
High Availability (HA):
Configures a load balancer and deploys instances across multiple Availability Zones for fault tolerance.

Service Role and Instance Profile:
Service Role:
Create or use an existing role for Elastic Beanstalk to manage resources.
Instance Profile:
Attach a role (e.g., S3 read-only permissions) to the instance. This is mandatory, even if permissions are not required.

VPC and Subnets:
Choose a VPC (default or custom).
Select subnets (at least one; more if scaling in the future is planned).
Enable the option to assign a public IP address.

Security Groups:
Select or create a security group to define allowed traffic (e.g., open port 80/443 for HTTP/HTTPS traffic).
Elastic Beanstalk may create an additional security group automatically.

Instance Type:
Choose an instance type, e.g., t2.micro (suitable for free-tier and small applications).

Platform Updates:
Disable managed platform updates for simplicity in the demo.
Enabling updates allows AWS to handle software and patch updates during defined maintenance windows.

Review and Submit:
Verify all settings on the review page.
Submit the configuration to launch the Elastic Beanstalk environment.


4. Deployment and Environment Creation

Launch Process:
Elastic Beanstalk provisions resources such as:
EC2 instances.
Elastic Load Balancers (if HA is enabled).
Security groups.
Elastic IPs.
The environment health is monitored and reported during creation.

Accessing the Application:
Once the environment is healthy (status: green), a URL is provided to access the deployed application.

EC2 Instance Management:
Elastic Beanstalk deploys instances to your AWS account.
Instances are visible in the EC2 console.
SSH access is possible if the key pair and security group allow it.
Changes made via SSH are temporary and will be lost if the instance is replaced (e.g., during auto-scaling).


5. Elastic Beanstalk Features

Monitoring and Health:
Built-in metrics to monitor application and instance health.
Logs can be requested for troubleshooting.

Application Version Management:
Upload and manage multiple application versions.
Roll back to previous versions if needed.

Configuration Management:
Modify resources such as databases, networking settings, and scaling configurations.
Add new features or scale environments as needed.

Security:
Elastic Beanstalk automatically handles security groups and resource permissions.
You can customize security policies if required.


6. Key Observations

Auto-Created Resources:
Elastic Beanstalk may create additional security groups or resources even if you configure some manually.
For example, it creates a security group even if one is already selected in the wizard.

Managed Updates:
Platform updates (if enabled) are applied automatically by AWS.
Developers can set a maintenance window for updates.

SQS and Worker Environments:
Worker environments use Amazon SQS queues for background task processing.
Web servers can offload tasks to these queues for asynchronous processing.



7. Benefits of Elastic Beanstalk

Simplifies deployment of web applications by automating resource provisioning and management.
Offers flexibility to scale applications based on traffic demands.
Supports integration with AWS services like S3, RDS, and CloudWatch.
Provides developers with low-level access to instances for debugging or custom configurations.

Elastic Beanstalk provides a balance between automation and control, making it a powerful tool for developers who want to deploy and manage applications
without dealing with the complexities of infrastructure management.




