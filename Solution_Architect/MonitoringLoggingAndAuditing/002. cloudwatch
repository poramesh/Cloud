Amazon CloudWatch

Amazon CloudWatch is a performance monitoring tool that also supports logging.
It collects metrics from AWS resources (e.g., EC2, Lambda) and on-premises servers.
It can trigger alarms and automated actions based on performance data.
Logs can be collected from applications and resources for centralized monitoring.

Use Cases and Benefits

Performance Monitoring:
Collects metrics from AWS services and on-premises resources.
Provides visibility into operational performance.

Automated Responses:
Automates actions based on state or performance changes.

Resource Optimization:
Identifies over-utilized or under-utilized resources.

Actionable Insights:
Derives insights from collected logs for troubleshooting.

Operational Visibility:
Enhances understanding of system health and behavior.


Core Features

1. CloudWatch Metrics:
Time-ordered data sent by AWS services like EC2.
Metrics for EC2 are sent every 5 minutes (default) or 1 minute (detailed monitoring, paid).

Unified CloudWatch Agent:
Collects system-level metrics like memory and disk usage.
Must be installed for monitoring these metrics, as default EC2 metrics do not include them.

Supports custom metrics with:
Standard resolution: 1-minute granularity.
High resolution: 1-second granularity.


2. CloudWatch Alarms:
Monitors metrics and performs actions when thresholds are breached.

Types:
Metric alarms: Based on a single metric.
Composite alarms: Based on multiple alarms using rules.

Alarm states:
OK: Metric within threshold.
ALARM: Metric outside threshold.
Insufficient data: Not enough data to determine state.


3. CloudWatch Logs:
Centralized collection of application and system logs.
Logs can be used for analysis and troubleshooting.
 

4. CloudWatch Events:
Responds to resource state changes.
Basis for Amazon EventBridge, which adds more functionality.


How It Works

>Metrics from AWS services are sent to CloudWatch (e.g., EC2 sends data every 5 or 1 minute).
>Unified CloudWatch Agent can be installed to collect additional metrics like:
Memory usage.
Disk usage.
> Custom metrics can be published via CLI or API.


Key Exam Tips
Unified CloudWatch Agent is necessary for memory and disk usage metrics.
AWS default metrics are sent at standard resolution (1-minute granularity).
Custom metrics can be configured for high resolution (1-second granularity).
Alarms can automate actions, such as triggering auto-scaling when thresholds are breached.


Example Use Case
EC2 instance sends CPU utilization metrics to CloudWatch.
Threshold breach triggers a CloudWatch alarm.
Alarm notifies Auto Scaling, which launches additional EC2 instances.





<<<HOL>>>




These commands can be executed using AWS CloudShell

Create an IAM role and instance profile

1. Create an IAM policy
aws iam create-policy --policy-name "CloudWatch-Put-Metric-Data" --policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["cloudwatch:PutMetricData"],"Resource":"*"}]}'
(The * means this permission applies to all CloudWatch metrics in the AWS account.)
2. Create an IAM role that uses the policy document
aws iam create-role --role-name "CloudWatch-Role" --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ec2.amazonaws.com"},"Action":"sts:AssumeRole"}]}'

3. Attach the policy to the role (update policy ARN)
aws iam attach-role-policy --role-name "CloudWatch-Role" --policy-arn "CloudWatch-Put-Metric-Data"

4. Create an instance profile
aws iam create-instance-profile --instance-profile-name "CloudWatch-Instance-Profile"

5. Add the role to the instance profile
aws iam add-role-to-instance-profile --instance-profile-name "CloudWatch-Instance-Profile" --role-name "CloudWatch-Role"



Now we can launch an EC2 instance that uses the
instance profile that will allow it to assume the role,
which has the policy applied to it to allow the
EC2 instance to put metric data to Cloudwatch.

Launch an EC2 instance

1. Create a security group
aws ec2 create-security-group --group-name CustomMetricLab --description "Temporary SG for the Custom Metric Lab"

2. Add a rule for SSH inbound to the security group
aws ec2 authorize-security-group-ingress --group-name CustomMetricLab --protocol tcp --port 22 --cidr 0.0.0.0/0

3. Launch instance in US-EAST-1A
aws ec2 run-instances --image-id --instance-type t2.micro --placement AvailabilityZone=us-east-1a --security-group-ids --iam-instance-profile Name="CloudWatch-Instance-Profile"



Run the remaining commands from the EC2 instance
Install stress
sudo dnf install stress-ng -y

This will allow us to actually add some load to the instance once we have set up the configuration.


Configure a shell script that uses the put-metric-data API
1. Create a shell script named mem-usage.sh
sudo nano mem-usage.sh //a file where we are trying to create with nano utility and we will add the below code.

2. Add the following code and save:
#!/bin/bash

# Create a token for IMDSv2 that expires after 60 seconds
TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 60" -s`

# Use the token to fetch the EC2 instance ID
INSTANCE_ID=`curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id`

# Get memory usage and put metric data to CloudWatch
MEMORY_USAGE=$(free | awk '/Mem/{printf("%d", ($2-$7)/$2*100)}')
aws cloudwatch put-metric-data --region us-east-1 --namespace "Custom/Memory" --metric-name "MemUsage" --value "$MEMORY_USAGE" --unit "Percent" --dimensions "Name=InstanceId,Value=$INSTANCE_ID"

//we'll end up with a name space of custom slash memory and a metric called mem usage in the cloiudwatch.

3. Make the script executable
sudo chmod +x mem-usage.sh

4. Run the following commands to install and run crontab
sudo dnf install cronie
sudo systemctl enable crond
sudo systemctl start crond
crontab -e //this opens a notepad like nano and then we paste in the below script

//crontab is a way that we can schedule our tasks to run
using a service that's running in the background on the instance.
Now, the way that we do that is we have to add the script here
and what this actually means these stars here.
The way it's, this is set up is it's going to run the script every minute.
So copy that exactly as it is. Let's come back, I'm gonna paste it in.
Then I press escape colon
WQ and you can see the WQ in the bottom left hand
corner here and that's gonna help you to quit the file.
So Cron
Tab is now set up, that means our script is going to run and retrieve the memory usage
and send it to cloud watch every single minute.



5. Then, add the following line to execute the script every minute
*****/home/ec2-user/mem-usage.sh

6. Save by typing the following and pressing enter
:wq


Run the stres utility to generate load
stress-ng --vm 15 --vm-bytes 80% --vm-method all --verify -t 60m -v



Verify Metrics in CloudWatch
In the AWS Management Console:
Navigate to CloudWatch > Metrics.
Look for the custom namespace Custom/Memory.
Ensure the mem_usage metric is being logged.


Setting Up Alarms

Create an Alarm:
Navigate to the custom metric in CloudWatch.
Set a threshold (e.g., memory usage > 40%).
Create an SNS topic for notifications and confirm the email subscription.
Save the alarm configuration.

Monitor Alarm:
Alarm states:
OK: Metric within threshold.
ALARM: Metric exceeds threshold.
INSUFFICIENT DATA: Not enough data yet.
Example: Alarm triggers if memory usage > 40% for 1 data point in 5 minutes.


Generate Load and Test Alarm
Use the stress utility to create memory load on the instance.
Monitor the custom metric and verify the alarm is triggered in CloudWatch.
Check the email notification from the SNS topic for details about the event.
__

Key Takeaways

Custom Metrics:
Useful for monitoring application-specific or system-specific metrics not provided by default.

IAM Roles:
Essential for allowing EC2 to interact with CloudWatch securely.

Automation:
Cron jobs can automate metric reporting at regular intervals.

Alarms:
Provide real-time notifications for operational events.

Stress Testing:
Helpful for validating monitoring and alarm configurations.




_______________________________________________________

CLoudWatch Logs

Purpose: Enables collection, monitoring, and analysis of application and system logs.

Key Features:
1. Log Gathering: Collect logs from various sources such as applications, systems, and AWS services.
2. Expiration Policies: Define retention periods for log data to manage storage and costs.
3. Encryption: Use AWS Key Management Service (KMS) for encrypting logs.
4. Destinations: Logs can be exported to:
Amazon S3 (for archiving or analytics).
Kinesis Data Streams (real-time streaming).
Kinesis Data Firehose (data transformation and delivery).
ElasticSearch (for real-time log processing and search).


Log Sources

1. Amazon EC2 and On-Premises Servers:
Use the Unified CloudWatch Agent to send logs and metrics to CloudWatch.
Logs include:
Application Logs
System Logs
Custom Metrics

2. AWS Lambda:

Lambda functions can send log data directly to CloudWatch Logs.
Permission Required: IAM roles must allow the Lambda function to write logs to CloudWatch.

3. Other AWS Services:

Examples: API Gateway, RDS, ECS, etc.


Permissions

To send logs or metrics to CloudWatch, the resource must have the appropriate IAM permissions.
Example:
Lambda needs logs:CreateLogGroup, logs:CreateLogStream, and logs:PutLogEvents permissions.


Processing and Exporting Logs

Real-Time Processing:
Use Subscription Filters for real-time log processing.
Logs can be sent to:
ElasticSearch
AWS Lambda

Exporting Logs:
Export logs to destinations like Amazon S3 for storage or analytics.



Unified CloudWatch

Purpose:
The Unified CloudWatch Agent allows you to collect internal system-level metrics and logs from Amazon EC2 instances as well as on-premises servers.
It works across different operating systems (Linux, Windows, and macOS).
Supports real-time log collection and custom metrics retrieval from applications/services (via StatsD and collectd protocols).


Key Features

1.System-Level Metrics Collection:
Amazon EC2 instances and on-premises servers can send system metrics like CPU, memory, disk space, and network activity to CloudWatch.
It works on Linux, Windows, and macOS.

2. Log Collection:
The agent can collect logs (system logs, application logs, custom logs) in near real-time.
Logs are sent to CloudWatch as they're generated, so even if an EC2 instance is terminated (e.g., by an auto scaling group), you won’t lose 
log data as it’s already sent to CloudWatch.

3. Custom Metrics:
You can collect custom metrics from your applications using StatsD and collectd protocols.
These metrics can be specific to your application needs, such as custom performance metrics, business logic metrics, etc.


Log and Metric Collection on EC2 and On-Premises Servers

EC2: The Unified CloudWatch Agent collects logs and system metrics from your EC2 instances (Linux/Windows).
On-Premises Servers: You can also install the agent on on-premises servers (Linux/Windows/macOS) to send logs and metrics to CloudWatch.


Important Points for Exam

1.Installation on EC2 and On-Premises Servers:
The Unified CloudWatch Agent can be installed on both EC2 instances and on-premises servers.
Supported OS: Linux, Windows, and macOS.

2. Real-Time Log Collection:
Logs are collected in near real-time, so even when EC2 instances are terminated (e.g., from auto scaling), the log files are still available in CloudWatch.

3. Standard Metrics vs. Unified CloudWatch Agent Metrics:
>Standard EC2 Metrics (available by default in CloudWatch): These include basic metrics like CPU utilization, network traffic, etc.
>Unified CloudWatch Agent Metrics (additional metrics that come from the agent):
Disk Metrics: Free space, used space, and disk usage percentages.
Memory Metrics: Percentage of available memory, active memory, memory available for processes.
>These advanced disk and memory metrics are not available in the standard EC2 metrics and require the Unified CloudWatch Agent.


Advanced Metrics from Windows Performance Monitor

For Windows servers, the Unified CloudWatch Agent collects metrics from the Windows Performance Monitor and sends it to CloudWatch.
This includes metrics such as disk usage, memory usage, etc., that are not available in standard EC2 metrics.

Metrics Collected for Linux and macOS

The Unified CloudWatch Agent for Linux and macOS collects a wide range of metrics. Some common metrics include:
Disk Metrics: Free space, used space, disk utilization.
Memory Metrics: Available memory, active memory, memory used by processes.


Summary of Key Metrics Not Included in Standard EC2 Metrics
Disk Metrics:
Free space, used space, and disk utilization.
Memory Metrics:
Percentage of memory available, active memory, memory used by processes.
These metrics are only available with the Unified CloudWatch Agent.

