AWS Key Management Service (KMS) -

AWS Key Management Service (KMS) is used to create, manage, and control encryption keys for encrypting data across various AWS services.
KMS integrates with many AWS services and offers both symmetric and asymmetric encryption.
The KMS keys are protected by hardware security modules or HSM. that means they're stored very securely.

Types of KMS Keys

Customer Managed Keys (CMKs)
Created and managed by the developer.
Key Material: By default, AWS generates key material for these keys, but you can import your own key material.
Rotation: Optional and can be configured to rotate automatically every 365 days.
Usage: Ideal for developers who need complete control over their encryption keys.

AWS Managed Keys
These keys are created, managed, and rotated by AWS for specific AWS services.
No Management Control: You cannot rotate, modify policies, or manage these keys. You can only use them.
Example Use: AWS services like SQS(simple queue service), ACM(AWS certificate manager), EBS(elastic block store), and FSx use these keys.
Rotation: Automatic and required every 365 days.

AWS Owned Keys
Used by AWS services for general encryption purposes across multiple accounts.
You cannot view or manage these keys.
Rotation: Automatic rotation is supported for symmetric keys, and it happens every 365 days.


Key Concepts in KMS

KMS Key
Formerly known as Customer Master Keys (CMKs).
The key material in the KMS key is used for encryption and decryption.
Limitations: KMS keys can encrypt data up to 4 KB in size.
To encrypt larger data, Data Encryption Keys (DEK) are used, which are generated and encrypted by KMS keys.

Data Encryption Keys (DEK)
Purpose: Encrypts data larger than 4 KB. KMS generates DEKs, but they are used outside of KMS.
Management: The application code must handle DEKs (e.g., using them to encrypt/decrypt data).



Types of Key Stores for KMS Keys
External Key Store (XKS)
Used for regulatory compliance (e.g., when key material needs to remain outside AWS).
Keys are generated and stored in an external key manager.
The key material never leaves the hardware security module (HSM).

Custom Key Store (CloudHSM)
Keys are stored in a dedicated Cloud HSM cluster that you own and manage.
Cryptographic operations occur within the Cloud HSM cluster.
Not available for asymmetric KMS keys.



Key Rotation
Automatic Rotation:
Available for customer managed keys.
Occurs every 365 days by default.
When rotated, key ID remains the same, but the key material changes.
The application doesn't need to be updated as the key ID/ARN stays constant.

Manual Rotation:
Required for keys with imported material, CloudHSM keys, asymmetric keys, etc.
When manually rotating, create a new KMS key and update your application with the new key ID.
Alternatively, use an alias to point to the new key to avoid updating the application code.

**********

Key Rotation involves updating the key material of a KMS key (e.g., generating new cryptographic material) while keeping the Key ID and alias the same.
Backward Compatibility: When data is encrypted with a KMS key, AWS keeps track of the version of the key material used for encryption. 
This ensures that the same version of the key material is used for decryption.

Example
You have a Customer Managed Key (CMK).
Key ID: 1234abcd
Current Key Material (Version 1): Encrypts "Data A" and "Data B."

You rotate the key material.
Key ID remains: 1234abcd
New Key Material (Version 2): Encrypts "Data C."

Now:
"Data A" and "Data B" will still be decrypted using Version 1.
"Data C" will be decrypted using Version 2.
AWS KMS handles all of this behind the scenes.

*************

Key Policies
KMS Key Policies
Define management and usage permissions for KMS keys.
Example: Permissions for administrators, cryptographic actions (encryption, decryption), and usage delegation.

Grants:
Temporary permissions for using keys.
Useful for delegating key usage without modifying key policies or IAM policies.

AWS KMS via Service Condition
Allows you to restrict key usage to specific services (e.g., EC2, RDS).
Example: Key policies can enforce that the key can only be used by EC2 or RDS.


***********************

1. Key Policies
A KMS Key Policy is an AWS Identity and Access Management (IAM) resource policy that specifies who can manage and use a KMS key. 
Key policies provide fine-grained access control for KMS keys and govern key management actions like creating, 
updating, deleting keys and using them for encryption/decryption.

Key Policy Components:
Key Administrators: Define who can manage KMS keys, such as rotating, deleting, or updating the key.
Cryptographic Usage Permissions: Define who can use the key for cryptographic actions like encryption and decryption.
Delegating Key Usage: Allows other AWS services or IAM users to use the key to perform actions like encryption, decryption, or re-encryption.

Example of Key Policy: Here’s an example key policy granting full administrative permissions to the key administrator and 
allowing encryption and decryption by a service.

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "KeyAdmins",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::123456789012:user/admin_user"
      },
      "Action": [
        "kms:CreateKey",
        "kms:PutKeyPolicy",
        "kms:DeleteKey",
        "kms:DescribeKey"
      ],
      "Resource": "*"
    },
    {
      "Sid": "AllowEncryptionDecryption",
      "Effect": "Allow",
      "Principal": "*",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws:kms:us-west-2:123456789012:key/abcd1234-efgh-5678-ijkl-9101mnopqrst"
    }
  ]
}

Key Policy Breakdown:
The KeyAdmins statement allows the admin_user to perform administrative tasks like creating, updating, or deleting keys.
The AllowEncryptionDecryption statement allows anyone to use the KMS key for encryption and decryption.
In real-world scenarios, you’ll define more detailed access, allowing only specific users or services to interact with your KMS keys.

2. Grants
Grants are temporary permissions assigned to IAM entities (users, roles, or services) for specific actions on a KMS key. Grants are useful for
delegating key usage without modifying the key policy or IAM policies, which makes them more flexible in short-term or temporary scenarios.

A Grant allows you to:
Assign a temporary set of permissions for specific actions (like encryption or decryption).
Delegate permissions to other AWS services for using the KMS key.

Example of Grant:
For example, let's say you want to allow EC2 instances to use a KMS key for encryption, but you don't want to modify the Key Policy or IAM policies directly.

Here’s how you can create a grant that gives EC2 the ability to use a specific KMS key:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowEC2ToUseKey",
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws:kms:us-west-2:123456789012:key/abcd1234-efgh-5678-ijkl-9101mnopqrst"
    }
  ]
}
Grant Breakdown:
Principal: Specifies the service (ec2.amazonaws.com) that can use the KMS key.
Action: Allows EC2 to perform Encrypt and Decrypt actions with the KMS key.
Resource: Specifies which KMS key the grant applies to.
You can issue and revoke grants dynamically, which makes them useful for temporary permissions.

3. AWS KMS via Service Condition
You can use service-specific conditions in your key policy to restrict usage of the KMS key to specific AWS services (like EC2 or RDS). This is
useful if you want to limit the key’s usage to certain services, preventing misuse outside your intended scope.

How to Use kms:ViaService Condition:
The kms:ViaService condition key allows you to specify that the key can only be used by certain services within your AWS account. For
example, if you want the KMS key to only work for EC2 and RDS, you can enforce that in the key policy.

Example of Key Policy with kms:ViaService Condition:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowEncryptionDecryptionForEC2andRDS",
      "Effect": "Allow",
      "Principal": "*",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws:kms:us-west-2:123456789012:key/abcd1234-efgh-5678-ijkl-9101mnopqrst",
      "Condition": {
        "StringEquals": {
          "kms:ViaService": [
            "ec2.us-west-2.amazonaws.com",
            "rds.us-west-2.amazonaws.com"
          ]
        }
      }
    }
  ]
}
Condition Breakdown:
kms:ViaService: This condition ensures that the KMS key can only be used by requests originating from EC2 and RDS services in the us-west-2 region.
StringEquals: The condition matches the exact service endpoints (ec2.us-west-2.amazonaws.com and rds.us-west-2.amazonaws.com).
This setup ensures that only EC2 or RDS services in the specific region can use the KMS key for encryption or decryption. If another service attempts 
to use this key, access will be denied.

Key Takeaways:
Key Policies: Control who can manage and use KMS keys. Permissions can be set for administrators, cryptographic actions, and delegating usage.
Grants: Temporary permissions to use KMS keys, allowing you to delegate access without modifying the key policies or IAM policies.
AWS KMS via Service Condition: A condition that restricts key usage to specific AWS services, ensuring the key is used only for intended purposes.
This model allows for fine-grained access control and flexibility in managing your encryption keys across various AWS services.


*************************



Cryptographic Erasure
Definition: The process of deleting key material to prevent decryption.
Use Case: If you want to ensure data is completely irretrievable, delete the key material.
The Delete Imported Key Material API removes the key material permanently.
Key Rotation and Management for KMS Keys


Customer Managed Keys:
Automatic key rotation is optional.
Can be rotated every 365 days (AWS will handle this automatically).

AWS Managed Keys:
Rotation is mandatory and happens every 365 days.
Cannot be manually rotated or changed.

AWS Owned Keys:
Automatic rotation happens every 365 days for symmetric keys.
No manual rotation.

Manual Key Rotation:
Involves creating a new KMS key with a different key ID.
Can be disruptive, as applications need to be updated with the new key ID, unless using an alias.


Important Exam Tips
Rotation Differences: Understand the differences in automatic vs. manual rotation for AWS-managed, customer-managed, and AWS-owned keys.
Key Policy Configuration: Understand how to define permissions and usage for KMS keys, especially in terms of grants 
and AWS services via condition keys.
Decryption with Imported Key Material: Know how to use Cryptographic Erasure to delete imported key material when needed.
Invalid Key ID Exceptions: Know that certain exceptions (e.g., invalid key ID) can arise when using SSM Parameter Store or
other services and could point to an issue with key enablement.


Summary
KMS is crucial for key management and encryption in AWS.
There are three types of keys: customer-managed, AWS-managed, and AWS-owned.
You can rotate keys automatically every 365 days (customer-managed) or manually for others.
Data Encryption Keys (DEKs) are used for encrypting large amounts of data (>4KB).
Understand the key policies, grants, and best practices to manage keys securely and ensure minimal disruption to your applications.





:::HOL:::

Lesson Overview

This lesson demonstrates how to:
Encrypt and decrypt data using AWS KMS and Python's boto3 library.
Set up an EC2 instance with the required permissions to access a KMS key.
Create and use an AWS KMS key for encrypting and decrypting data.





## PIP
curl -O https://bootstrap.pypa.io/get-pip.py python3 get-pip.py --user
## boto3
pip install boto3

## Create a Python script with the following code

```python
import boto3

# Initialize the KMS client
kms = boto3.client('kms', region_name='us-east-1')

# The ID or ARN of your KMS key (you can get it from the AWS console)
key_id = 'arn:aws:kms:us-east-1:676238238199:key/e1de5166-f54a-4fc9-835d-1234da4dd743'

# Data to be encrypted
plaintext = 'This is a secret message'

# Encrypt the data
response = kms.encrypt(
    KeyId=key_id,
    Plaintext=plaintext,
    EncryptionAlgorithm='SYMMETRIC_DEFAULT'
)

# Get the ciphertext blob
ciphertext_blob = response['CiphertextBlob']

# Save the encrypted data to a file
with open('encrypted_data', 'wb') as encrypted_file:
    encrypted_file.write(ciphertext_blob)

print('Encrypted data saved to "encrypted_data" file.')

# Decrypt the data
decrypt_response = kms.decrypt(
    CiphertextBlob=ciphertext_blob,
    KeyId=key_id
)

# Get the plaintext back
decrypted_plaintext = decrypt_response['Plaintext'].decode('utf-8')

# Save the decrypted data to a file
with open('decrypted_data.txt', 'w') as decrypted_file:
    decrypted_file.write(decrypted_plaintext)

print('Decrypted data saved to "decrypted_data.txt" file.')
```










Step-by-Step Process

1. Preparing the Environment
Launch an EC2 Instance:
Go to EC2, launch an instance, and select default settings.
Use a t2.micro instance, attach the KMS role created in the next step, and enable SSH access through the security group.

Create an IAM Role for EC2:
Go to IAM → Create Role → Select EC2 use case.
No permissions policies are required since the role will have direct access to the KMS key.
Name the role (e.g., KMS-key-EC2) and create it.

Install Necessary Tools on EC2:
Once the instance is running, connect via EC2 Instance Connect and run the following commands:
# Download and install pip  
curl -O https://bootstrap.pypa.io/get-pip.py  
python3 get-pip.py  

# Install boto3 (AWS SDK for Python)  
pip install boto3  


2. Creating a KMS Key
Go to AWS KMS → Click on Create Key.
Choose Symmetric Key (used for encrypting and decrypting data).
Name the key (e.g., encrypt-decrypt-data).
Select Key Administrators: Specify your account.
Select Key Users: Add both your account and the EC2 role created earlier (e.g., KMS-key-EC2).

Key Policy:
The policy generated will have permissions for administration (e.g., create, delete, and list key actions) and usage (e.g., encrypt, decrypt, and generate data keys).
Review and finish creating the key.

3. Running the Python Script
Prepare the Python Script:
Locate the ARN (Amazon Resource Name) of the KMS key from the KMS console.
Replace the placeholder in the script with the key ARN.
Example Script:

import boto3

kms_client = boto3.client('kms')

# Replace this with your KMS key ARN
key_id = '<YOUR_KMS_KEY_ARN>'
plaintext = 'This is a secret message.'

# Encrypt the plaintext
encrypt_response = kms_client.encrypt(
    KeyId=key_id,
    Plaintext=plaintext
)
encrypted_blob = encrypt_response['CiphertextBlob']
with open('encrypted_data', 'wb') as f:
    f.write(encrypted_blob)

# Decrypt the data
decrypt_response = kms_client.decrypt(
    KeyId=key_id,
    CiphertextBlob=encrypted_blob
)
decrypted_text = decrypt_response['Plaintext'].decode('utf-8')
with open('decrypted_data', 'w') as f:
    f.write(decrypted_text)
Run the Script:

Save the script on your EC2 instance (e.g., python-script.py) using a text editor like nano.
Run the script:
python3 python-script.py

Verify the Output:
Two files are generated:
encrypted_data: Contains encrypted data (unreadable).
decrypted_data: Contains the original plaintext message.

Use cat to view the files:
cat encrypted_data  
cat decrypted_data  

4. Clean-Up

Delete the KMS Key:
Go to KMS → Select the key → Choose Key Actions → Schedule Key Deletion.
Specify a minimum 7-day waiting period (you can retrieve data during this time if needed).

Terminate the EC2 Instance:
Go to EC2 → Select the instance → Terminate.


Important Notes
Role Permissions: Ensure the EC2 instance has the proper role attached for accessing the KMS key.
Key Policies:
Administration policies (e.g., creating or deleting keys).
Usage policies (e.g., encrypting and decrypting data).
ARNs: Used to identify resources like the KMS key and IAM roles.
Charges: KMS incurs charges, so disable or delete keys when no longer in use.
Key Rotation: Manual or automatic rotation of keys affects key material but not the key ARN, ensuring minimal disruption.
Encryption Limitations: The KMS key itself can only encrypt data up to 4 KB. For larger data, generate a data encryption key (DEK).
Key Deletion: Deleting a key irreversibly prevents access to encrypted data unless a backup exists.
