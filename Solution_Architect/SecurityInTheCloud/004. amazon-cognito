Amazon Cognito 

Amazon Cognito provides sign-up and sign-in functionality for web and mobile applications. It helps manage user authentication and provides access to 
AWS resources through temporary credentials.

Key Concepts
1. Cognito User Pools
Purpose: A user directory for managing user identities and authentication.
Functionality:
Users can sign up and sign in to applications.
Stores user credentials and generates JSON Web Tokens (JWTs) for authenticated users.
Federation: Can federate user identities with social identity providers (IDPs) (e.g., Facebook, Google, Apple).
Use Case:
Authenticate users for client or mobile applications.
Send JWT to API Gateway or other services for further processing.
Integration:
After authentication, JWTs can be passed to AWS services like API Gateway and processed using Lambda authorizers.

2. Cognito Identity Pools
Purpose: Provides temporary AWS credentials to access AWS resources.
Functionality:
Uses AWS Security Token Service (STS) to generate temporary, limited-privilege credentials.
Credentials are tied to IAM roles for access control.
Supports both authenticated and unauthenticated access.
Use Case:
Allows authenticated users to securely access AWS services like Lambda, DynamoDB, or S3.
Integration:
Authenticated users from User Pools or federated IDPs exchange JWTs with the Identity Pool to assume roles and obtain AWS credentials.


Key Differences: User Pools vs. Identity Pools

Feature            	 User Pools	                                               Identity Pools
Purpose	             Authentication (sign-in/sign-up).	                       Authorization (access AWS resources).
Token Type	         Generates JWT tokens for authenticated users.	           Uses AWS STS to provide temporary credentials.
Identity Management	 Stores user identities or federates with social IDPs.	   Works with identities from User Pools or directly federates to an IDP.
AWS Resource         Access	Indirect (via Identity Pools or JWT processing).	 Direct (temporary credentials via IAM roles).


How Cognito Works: Workflow
1. Using a Cognito User Pool
Authentication:
The client (web/mobile app) authenticates users using the User Pool.
A JWT token is issued upon successful login.
API Access:
The JWT can be sent to API Gateway or Lambda for further processing.
Lambda Authorizer validates the JWT to grant/deny access.

2. Using a Cognito Identity Pool
Temporary Credentials:
After authenticating via the User Pool, users exchange their JWTs with the Identity Pool.
The Identity Pool interacts with AWS STS to issue temporary credentials.
Role Assignment:
The user assumes an IAM role to access AWS services.
Resource Access:
The credentials are used to interact with AWS resources like DynamoDB, S3, etc.



Federation with Social Identity Providers (IDPs)

Federation Options:
Social IDPs: Facebook, Google, Apple, etc.
SAML-based IDPs.

Integration:
Federated identities are stored in the User Pool.
After authentication, these identities can access AWS resources via the Identity Pool.


Example Workflow: Combined User Pool and Identity Pool
Step 1: Client app authenticates users through the User Pool.
Generates a JWT token.
Step 2: JWT token is exchanged with the Identity Pool for temporary AWS credentials.
Step 3: The Identity Pool uses AWS STS to issue temporary credentials tied to an IAM role.
Step 4: Credentials are used to access AWS services (e.g., S3, Lambda, DynamoDB).


Key Takeaways
User Pools: Manage user authentication and identity.
Store user credentials or federate to external IDPs.
Generate JWTs for authenticated users.

Identity Pools: Provide temporary AWS credentials for resource access.
Use STS to issue credentials tied to IAM roles.
Works with identities from User Pools or directly federated IDPs.

Integration: User Pools and Identity Pools can work together for seamless authentication and authorization.





Scenario

Business Need:

You’re building an e-commerce website with these functionalities:
Allow users to sign up or sign in to their accounts using email or social media logins (e.g., Google, Facebook).
Once logged in, users should be able to:
View and update their profile.
Upload their profile pictures to Amazon S3.
View their purchase history stored in DynamoDB.


Flow Diagram
User Pool: Handles user authentication (e.g., email/password, Google, Facebook).
Identity Pool: Issues temporary credentials after authentication.
AWS Services: Allows authenticated users to interact with S3, DynamoDB, etc.


Detailed Workflow

User Sign-Up or Sign-In:
The user signs in through the client app (e.g., mobile app or website).
Authenticates via Cognito User Pool (or federates via Google/Facebook).
Receives a JWT token.

Access AWS Services:
The client app sends the JWT token to the Cognito Identity Pool.
The Identity Pool validates the token and uses AWS STS to issue temporary credentials.

Perform Actions:
Use the temporary credentials to:
Upload files to S3 (e.g., profile pictures).
Query DynamoDB for purchase history.
Access any other permitted AWS resource.


Example Roles

IAM Role for Authenticated Users:
Allow access to specific S3 bucket for uploading files.
Read/write permissions on DynamoDB for the user’s data.

IAM Role for Unauthenticated Users (optional):
Allow read-only access to DynamoDB for browsing product catalogs.



Example API Request

Profile Update:
Client sends a request to the API Gateway with the JWT token.
API Gateway forwards the request to Lambda, where the JWT token is verified.
Lambda updates the user profile in DynamoDB.

File Upload:
Client directly uploads the file to S3 using temporary credentials issued by the Identity Pool.
