Amazon CloudFront

1. What is Amazon CloudFront?
Amazon CloudFront is a Content Delivery Network (CDN) service.
Purpose:
Improve performance by delivering files (objects) such as images, videos, or other static and dynamic content closer to users.
Reduce latency by caching content at geographically distributed locations.


2. Key Concepts of CloudFront

2.1 Origin
The origin is the source of the content delivered by CloudFront.
Examples:
>Amazon S3: Store and serve objects like images, videos, and static files.
>Amazon EC2: Serve dynamic content or applications.
>Custom Origin:
EC2 instances or web servers behind an Elastic Load Balancer (ELB).
Static websites hosted on S3.

2.2 Edge Locations
Edge locations are globally distributed data centers used to cache and deliver content closer to users.
Hundreds of edge locations exist worldwide, enabling lower latency and better performance.
Requests are automatically routed to the nearest edge location.


3. How CloudFront Works
Caching at Edge Locations:
Content from the origin is cached at edge locations.
Users access cached content at the edge location nearest to them, reducing latency.

Missed Cache:
If the requested content is not available in the cache:
The edge location fetches it from the origin (e.g., S3 or EC2).
The response is cached at the edge location for future requests.
The AWS global network is used to fetch content from the origin, ensuring lower latency compared to using the public internet.


4. CloudFront Distributions

4.1 Types of Distributions
Web Distribution:
Speeds up the delivery of static and dynamic content.
Supports HTTP and HTTPS.
Commonly used for websites, APIs, and live streaming.
RTMP Distribution (Deprecated):
Used for streaming media files via Adobe Flash. No longer available.

4.2 Distribution Features
Access Endpoint:
Each distribution is assigned a unique endpoint, e.g., d123abc4.cloudfront.net.
Custom domains can also be used, e.g., www.example.com.
Multiple Origins:
A single distribution can serve content from multiple origins (e.g., S3, EC2, or a combination).


5. CloudFront Behaviors
Behavior defines how CloudFront handles requests for different paths or content types.

Key Configurable Behaviors:
Path Patterns:
Route specific requests to different origins based on the requested path.
Example:
Requests to /images/* go to the S3 origin.
Requests to /api/* go to the custom origin.

Protocol Policies:
Define whether requests should use HTTP, HTTPS, or redirect to HTTPS for secure connections.

Cache Policies:
Control how long objects are stored in the edge location's cache.

Cache can be configured for:
Specific content types.
Specific headers or query strings.

Origin Request Policies:
Specify the security and performance settings for communication between edge locations and origins.



6. Benefits of CloudFront

Reduced Latency:
Cached content is delivered from the nearest edge location.
Improved Performance:
Uses the AWS global network for fetching content from origins.
Global Reach:
Hundreds of edge locations worldwide ensure content delivery is close to users, no matter where they are.
Scalable:
Automatically scales to handle increasing requests globally.
Security:
Support for HTTPS.
Integrates with AWS WAF (Web Application Firewall) for additional protection.
Geo-restrictions to block content delivery to specific regions.


7. Latency and Performance
Latency:
Delay caused by:
Physical distance between users and the origin.
Number of network hops and routers.
Congestion on network lines.

CloudFront Mitigation:
Distributes content globally at edge locations.
Directs users to the nearest edge location for minimal latency.


8. Use Cases
Static Websites:
Serve static files from S3 buckets using CloudFront.

Dynamic Content:
Deliver API responses or personalized content from EC2 instances.

Video Streaming:
Stream videos using CloudFront with live or on-demand support.

Custom Applications:
Enhance the performance of web applications or gaming platforms.


9. Security in CloudFront
HTTPS:
Ensures secure connections between users and CloudFront.
Geo-Restrictions:
Block access to content from specific countries or regions.
AWS Shield:
Protects against DDoS attacks.
AWS WAF:
Add rules to block malicious traffic.


10. Practical Example
Scenario:
You host:
Static files (e.g., images, CSS) on S3.
Dynamic content (e.g., APIs) on EC2 behind a load balancer.

Solution:
Create a CloudFront Web Distribution:
Configure S3 and EC2 as origins.
Use path patterns to route:
/static/* requests to S3.
/api/* requests to EC2.
Set up caching for static files with long expiration times.
Enable HTTPS for secure connections.


11. Steps to Create a Web Distribution
Go to the CloudFront Console.
Create a Web Distribution.
Specify:
Origins (e.g., S3 bucket, EC2 instance).
Default Cache Behavior:
Protocol policies (HTTP or HTTPS).
Cache settings.
Configure Path Patterns for additional behaviors.
Deploy and test using the CloudFront endpoint or a custom domain.









Detailed Notes on Amazon CloudFront (In-Depth)

1. CloudFront Architecture

1.1 Origins
EC2 Origin: Serves dynamic or custom application content.
S3 Origin: Stores and serves static content like images, CSS, or videos.
Custom Origin: Any HTTP server, such as on-premises servers or third-party cloud providers.

1.2 Regional Edge Cache
Acts as an intermediate layer between Edge Locations and Origins.
Purpose:
Provides a larger cache to store more objects.
Reduces the frequency of origin fetches, improving performance and reducing costs.
Number:
Only 12 Regional Edge Caches, compared to 210+ Edge Locations globally.
Workflow:
If content is not found in an edge location (cache miss), CloudFront checks the Regional Edge Cache.
If the Regional Edge Cache also misses, CloudFront fetches the content from the origin.

1.3 Edge Locations
The point of presence (PoP) where content is cached and served.
Globally distributed for low latency and high performance.



2. Cache Management

2.1 Cache Hits and Misses
Cache Hit:
Content is available in the edge location or Regional Edge Cache.
Delivered to the user immediately, ensuring high performance.
Cache Miss:
Content is not in the edge location or Regional Edge Cache.
CloudFront fetches it from the origin and stores it in the cache for future use.

2.2 Time-to-Live (TTL)
TTL (Time-to-Live): The duration for which objects remain in the cache before being revalidated or refreshed.
Default TTL: 24 hours.
Configurable TTL:
Can be set at the behavior level in the CloudFront distribution.
Helps balance performance and content freshness.


2.3 Cache-Control Headers

Cache-Control:
max-age=<seconds>: Specifies the maximum caching duration.
expires: Defines an exact expiration date and time.
Dynamic Content:
Use a shorter TTL to avoid serving stale content.
Static Content:
Use a longer TTL for better performance and reduced origin fetches.

2.4 Cache Invalidation
Allows you to remove specific objects from the cache before the TTL expires.
Cost: Invalidations incur charges, so TTL configuration should be optimized.


3. Behaviors and Path Patterns

3.1 Behaviors
Define how CloudFront processes requests.
Configured within the distribution.
Examples:
Path patterns.
Cache and origin request policies.
Protocol redirection (e.g., force HTTPS).

3.2 Path Patterns
Routes specific requests to different origins.
Examples:
Requests for *.jpg go to Origin 1 (S3 for images).
Requests for *.mp4 go to Origin 2 (EC2 for videos).
Default Origin:
Used for requests that donâ€™t match any path pattern.



4. Advanced Features

4.1 Request Headers
Headers from viewer requests can be forwarded to origins.

Caching Behavior Based on Headers:
Forward All Headers:
No caching is performed, as all requests are forwarded to the origin.
Whitelist Headers:
Forward only specific headers to the origin.
Enables caching of multiple versions based on header values.
Default Headers:
No caching is performed based on request headers.

4.2 Regional Edge Cache Optimization
Decreasing TTL:
Beneficial for dynamic content that changes frequently.
Increasing TTL:
Reduces origin fetches for static content, improving performance.


5. Traffic Flow in CloudFront

User Request:
User sends an HTTP/HTTPS request to the nearest Edge Location.
Cache Check:
Edge location checks its cache for the object.
Cache Miss: Fetches from the Regional Edge Cache.
Miss in Regional Cache: Fetches from the origin.
Object Delivery:
Object is cached at the edge location and served to the user.
Subsequent Requests:
Served from the cache until the TTL expires.


6. Signed URLs and Origin Access

6.1 Signed URLs
Securely restrict access to content in CloudFront distributions.
Purpose:
Provide temporary, limited access to specific objects.
Prevent unauthorized access.
Configuration:
Create a policy for access (e.g., expiration time, IP restrictions).
Generate signed URLs using private keys.

6.2 Origin Access Identity (OAI)
Ensures that content stored in S3 is only accessible via CloudFront.
Workflow:
Create an OAI in CloudFront.
Attach the OAI to your CloudFront distribution.
Update the S3 bucket policy to allow access only from the OAI.


7. Common Exam Topics
Path Patterns:
Understand how requests are routed to multiple origins.
Cache-Control Headers:
Know the impact of max-age and expires on caching.
Regional Edge Cache:
Role in reducing origin fetches and improving performance.
Signed URLs and OAIs:
Restrict access to S3 content securely.
TTL Configuration:
Best practices for dynamic and static content.


8. Best Practices
Optimize TTL Settings:
Balance freshness and performance.
Invalidate Cache Sparingly:
Use invalidations only when necessary to minimize costs.
Configure Path Patterns:
Route requests efficiently to appropriate origins.
Use OAI:
Secure S3 content by restricting direct access.
Enable HTTPS:
Encrypt all communication for better security.

This concludes the in-depth overview of CloudFront, covering its architecture, caching, behaviors, and advanced features. Let me know if you need further clarification or examples!

