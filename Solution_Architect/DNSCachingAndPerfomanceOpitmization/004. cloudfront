Amazon CloudFront

1. What is Amazon CloudFront?
Amazon CloudFront is a Content Delivery Network (CDN) service.
Purpose:
Improve performance by delivering files (objects) such as images, videos, or other static and dynamic content closer to users.
Reduce latency by caching content at geographically distributed locations.


2. Key Concepts of CloudFront

2.1 Origin
The origin is the source of the content delivered by CloudFront.
Examples:
>Amazon S3: Store and serve objects like images, videos, and static files.
>Amazon EC2: Serve dynamic content or applications.
>Custom Origin:
EC2 instances or web servers behind an Elastic Load Balancer (ELB).
Static websites hosted on S3.

2.2 Edge Locations
Edge locations are globally distributed data centers used to cache and deliver content closer to users.
Hundreds of edge locations exist worldwide, enabling lower latency and better performance.
Requests are automatically routed to the nearest edge location.


3. How CloudFront Works
Caching at Edge Locations:
Content from the origin is cached at edge locations.
Users access cached content at the edge location nearest to them, reducing latency.

Missed Cache:
If the requested content is not available in the cache:
The edge location fetches it from the origin (e.g., S3 or EC2).
The response is cached at the edge location for future requests.
The AWS global network is used to fetch content from the origin, ensuring lower latency compared to using the public internet.


4. CloudFront Distributions

4.1 Types of Distributions
Web Distribution:
Speeds up the delivery of static and dynamic content.
Supports HTTP and HTTPS.
Commonly used for websites, APIs, and live streaming.
RTMP Distribution (Deprecated):
Used for streaming media files via Adobe Flash. No longer available.

4.2 Distribution Features
Access Endpoint:
Each distribution is assigned a unique endpoint, e.g., d123abc4.cloudfront.net.
Custom domains can also be used, e.g., www.example.com.
Multiple Origins:
A single distribution can serve content from multiple origins (e.g., S3, EC2, or a combination).


5. CloudFront Behaviors
Behavior defines how CloudFront handles requests for different paths or content types.

Key Configurable Behaviors:
Path Patterns:
Route specific requests to different origins based on the requested path.
Example:
Requests to /images/* go to the S3 origin.
Requests to /api/* go to the custom origin.

Protocol Policies:
Define whether requests should use HTTP, HTTPS, or redirect to HTTPS for secure connections.

Cache Policies:
Control how long objects are stored in the edge location's cache.

Cache can be configured for:
Specific content types.
Specific headers or query strings.

Origin Request Policies:
Specify the security and performance settings for communication between edge locations and origins.



6. Benefits of CloudFront

Reduced Latency:
Cached content is delivered from the nearest edge location.
Improved Performance:
Uses the AWS global network for fetching content from origins.
Global Reach:
Hundreds of edge locations worldwide ensure content delivery is close to users, no matter where they are.
Scalable:
Automatically scales to handle increasing requests globally.
Security:
Support for HTTPS.
Integrates with AWS WAF (Web Application Firewall) for additional protection.
Geo-restrictions to block content delivery to specific regions.


7. Latency and Performance
Latency:
Delay caused by:
Physical distance between users and the origin.
Number of network hops and routers.
Congestion on network lines.

CloudFront Mitigation:
Distributes content globally at edge locations.
Directs users to the nearest edge location for minimal latency.


8. Use Cases
Static Websites:
Serve static files from S3 buckets using CloudFront.

Dynamic Content:
Deliver API responses or personalized content from EC2 instances.

Video Streaming:
Stream videos using CloudFront with live or on-demand support.

Custom Applications:
Enhance the performance of web applications or gaming platforms.


9. Security in CloudFront
HTTPS:
Ensures secure connections between users and CloudFront.
Geo-Restrictions:
Block access to content from specific countries or regions.
AWS Shield:
Protects against DDoS attacks.
AWS WAF:
Add rules to block malicious traffic.


10. Practical Example
Scenario:
You host:
Static files (e.g., images, CSS) on S3.
Dynamic content (e.g., APIs) on EC2 behind a load balancer.

Solution:
Create a CloudFront Web Distribution:
Configure S3 and EC2 as origins.
Use path patterns to route:
/static/* requests to S3.
/api/* requests to EC2.
Set up caching for static files with long expiration times.
Enable HTTPS for secure connections.


11. Steps to Create a Web Distribution
Go to the CloudFront Console.
Create a Web Distribution.
Specify:
Origins (e.g., S3 bucket, EC2 instance).
Default Cache Behavior:
Protocol policies (HTTP or HTTPS).
Cache settings.
Configure Path Patterns for additional behaviors.
Deploy and test using the CloudFront endpoint or a custom domain.










1. Overview of CloudFront Architecture

Origins

EC2 Origin:
Serves dynamic or application-specific content.
Amazon S3 Origin:
Often used to serve static files such as images, videos, and documents.

Regional Edge Cache

Purpose:
Acts as an intermediary between edge locations and the origin.
Fewer in number (12 worldwide) compared to 210 edge locations.
Larger cache size, enabling storage of more content.

Workflow:
If content is not available at the edge location (cache miss), the regional edge cache is queried.
If the content is not available at the regional cache, a request is sent to the origin (origin fetch).

Edge Locations
Points of presence (PoPs) where users connect to access cached content.
Positioned globally to minimize latency and optimize performance.


2. Content Delivery Workflow

Cache Miss:
The requested object is unavailable in the edge location or regional edge cache.
Content is fetched from the origin.
Fetched content is cached at the edge location and/or regional edge cache for future use.

Cache Hit:
Requested object is available in the cache (either edge location or regional edge cache).
Content is delivered to the user with high performance.


3. Cache Settings

Time-to-Live (TTL):
Determines how long objects remain in the cache.
Default TTL: 24 hours.
Configurable at the behavior level in the CloudFront distribution.

Use Cases:
Dynamic Content:
Set a lower TTL to ensure users receive the most up-to-date version.
Static Content:
Increase TTL for better performance and reduced origin fetches.

Headers for Cache Control:
Use Cache-Control headers to define cache behavior.
max-age=<seconds>: Specifies cache duration in seconds.
Expires: Sets a specific expiration date and time.
These headers can override default TTL settings.


4. Path Patterns
Path patterns allow routing of specific file types to designated origins.

Example Configuration:
Origin 1: Handles image files (*.jpg).
Origin 2: Handles video files (*.mp4).
Default Origin: Used for all requests not matching any path pattern.

Use Case:
Request for beach.jpg is routed to Origin 1.
Request for ocean.mp4 is routed to Origin 2.


5. Request Headers

Forwarding Headers:
CloudFront can cache objects based on values of request headers.

Header Forwarding Modes:
All Headers:
No caching at the edge.
Ideal for dynamic content that changes based on headers.

Whitelist Headers:
Specify headers to forward.
Enables caching for specific headers while maintaining dynamic behavior.

Default Headers:
Caches objects without considering headers.


6. Cache Invalidation

Manual Cache Invalidation:
Explicitly remove objects from the cache when required.
Useful for immediate updates but incurs additional costs.
TTL and Dynamic Content:
Adjust TTL to manage freshness without manual invalidation.


7. Exam Tips
Understand the difference between edge locations and regional edge caches.
Know the importance of path patterns in routing requests to the correct origin.
Familiarize yourself with TTL settings and when to use lower vs. higher values.
Remember how request headers influence caching.

CloudFront’s nuanced caching strategies make it a powerful tool, especially when combined with your experience in automation and system optimization. W
ith a solid understanding of these concepts, you're well-prepared to dive into configurations or tackle related AWS challenges.





Amazon CloudFront – Signed URLs, Signed Cookies, OAI, and OAC

1. Signed URLs
Purpose:
Provide controlled access to restricted content.
Useful for granting temporary or specific access to content.

Key Features:
Expiration:
Define a start and end time for URL validity.

IP Restrictions:
Restrict access to specific IP addresses.

Workflow:
Authentication:
A mobile application requests authentication from a serverless application (e.g., AWS Lambda).
The application authenticates the client and generates a signed URL.
Access Content:
The client uses the signed URL to access the CloudFront distribution.
Content Delivery:
Content is securely delivered to the client.

Use Cases:
Granting access to individual files.
Ideal for clients that do not support cookies.


2. Signed Cookies
Purpose:
Similar to signed URLs but used for accessing multiple restricted files without changing the URLs.

Key Features:
No URL Change:
The URL remains unchanged; access is controlled via cookies.
Batch Access:
Useful for granting access to multiple files within the same distribution.


3. Origin Access Identity (OAI)

Purpose:
Restrict direct access to an S3 bucket while allowing access through a CloudFront distribution.

Components:
OAI:
A virtual user identity created by CloudFront.
Used to authenticate CloudFront’s access to the S3 bucket.
Bucket Policy:
Configured to allow access only to the specific OAI.

Workflow:
Users access the content through the CloudFront distribution.
The bucket policy ensures that only the OAI can retrieve content from the S3 bucket.
Direct access to the bucket is blocked.

Limitation:
Applicable only for S3 origins.
Not usable with EC2 instances, load balancers, or other origins.

Deprecation:
OAI has been deprecated in favor of OAC (Origin Access Control).

4. Origin Access Control (OAC)

Purpose:
Successor to OAI, providing enhanced functionality and flexibility.

Key Features:
Service Principal:
Uses the CloudFront service principal (cloudfront.amazonaws.com) for access control.

Condition for Source ARN:
Adds a condition in the bucket policy to validate the CloudFront distribution’s ARN.

Backward Compatibility:
Performs the same function as OAI but supports additional use cases.

Bucket Policy Example:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "cloudfront.amazonaws.com"
      },
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::<bucket-name>/*",
      "Condition": {
        "StringEquals": {
          "AWS:SourceArn": "arn:aws:cloudfront::<account-id>:distribution/<distribution-id>"
        }
      }
    }
  ]
}

Advantages Over OAI:

Simplified bucket policies.
Supports additional features and use cases.
Recommended for new deployments instead of OAI.


5. Comparison: Signed URLs vs. Signed Cookies

Feature	              Signed URLs	                              Signed Cookies
Primary Use Case	    Individual file access.	                  Access to multiple files.
URL Modification    	URL contains access parameters.	          No changes to the URL.
Client Compatibility	For clients that do not support cookies.	Requires cookie support.


6. Exam Tips

Signed URLs:
Best for individual file access and clients without cookie support.

Signed Cookies:
Use for batch access to multiple files with unchanged URLs.
OAI:
Deprecated; applicable only for S3 origins.
OAC:
Recommended replacement for OAI with enhanced features and wider use cases.

These notes cover all essential aspects of CloudFront signed URLs, signed cookies, OAI, and OAC. Let me know if you'd like further explanations or examples!





HOL


Amazon CloudFront Cache and Behavior Settings

1. Set up Amazon S3 buckets:
- Create two S3 buckets for the files (e.g., 'pdf-bucket' and 'jpg-bucket')
- Upload sample PDF files to the 'pdf-bucket' and JPG images to the 'jpg-bucket'
- Create a bucket for the static website

2. For the static website:
- Enable public access
- Configure as a static website
- Add the index.html (when ready)

3. Configure Amazon CloudFront:
- Create a new CloudFront distribution
- Add the static website as an origin (use website endpoint)
- Disable caching
- Add 2 more origins for the buckets containing the files and create/configure OAC
- Configure cache behavior settings for each origin based on file type (PDF or JPG) and default going to the static website


: CloudFront Cache and Behavior Settings

Overview
This lesson involves configuring CloudFront with three S3 buckets and setting up cache behaviors to route traffic based on file types.
The setup includes:

A static website bucket as the default origin.
Separate buckets for PDFs and JPGs.
Custom behavior rules to forward traffic to the appropriate bucket based on the file type.
Steps to Configure CloudFront Cache and Behavior

1. Create S3 Buckets

Buckets:
my-static-website – Hosts the static website (index.html).
pdf-bucket – Stores PDF files.
jpg-bucket – Stores JPG files.

Commands (AWS CLI):

aws s3 mb s3://my-static-website-<unique-id>
aws s3 mb s3://pdf-bucket-<unique-id>
aws s3 mb s3://jpg-bucket-<unique-id>

2. Configure the Static Website Bucket

Disable Block Public Access:
Go to Permissions > Block Public Access > Disable > Save Changes.

Add Bucket Policy:

Use the S3 bucket ARN to allow public access.
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::my-static-website-<unique-id>/*"
    }
  ]
}

Upload Files:
Upload index.html from the course folder to the bucket.

Enable Static Website Hosting:
Navigate to Properties > Static Website Hosting > Enable.
Specify index.html as the default document.

Test Static Website:
Use the Static Website URL provided in the bucket properties to verify the website.


3. Upload Files to PDF and JPG Buckets

Upload relevant files to their respective buckets:
JPG files (e.g., coffee.jpg, donut.jpg) → jpg-bucket.
PDF files (e.g., data-analysis.pdf) → pdf-bucket.


4. Create a CloudFront Distribution

Add Static Website as the Default Origin:
Go to the CloudFront Console > Create Distribution.
Choose the static website bucket as the origin and select Use Website Endpoint.
Disable caching (for testing purposes).
Skip other optional settings and create the distribution.

Verify Static Website:
Use the CloudFront distribution domain name to ensure the static website is accessible.


5. Add Additional Origins

JPG Bucket:
Go to Origins > Create Origin.
Select the jpg-bucket and enable Origin Access Control (OAC).
Copy the policy provided by CloudFront and add it to the jpg-bucket policy:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "cloudfront.amazonaws.com"
      },
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::jpg-bucket-<unique-id>/*",
      "Condition": {
        "StringEquals": {
          "AWS:SourceArn": "arn:aws:cloudfront::<account-id>:distribution/<distribution-id>"
        }
      }
    }
  ]
}

PDF Bucket:
Repeat the steps for jpg-bucket to add the pdf-bucket as an origin.
Reuse the OAC settings and adjust the bucket ARN in the policy.


6. Configure Behaviors

Default Behavior:
Routes all requests to the static website.

Custom Behaviors:
JPG Behavior:
Path pattern: *.jpg
Origin: jpg-bucket
Disable caching (for testing).

PDF Behavior:
Path pattern: *.pdf
Origin: pdf-bucket
Disable caching (for testing).


7. Test the Setup

Use the CloudFront distribution domain name to:
Access the static website (default behavior).
Access specific JPG files using their URLs (e.g., /donut.jpg).
Access specific PDF files using their URLs (e.g., /data-analysis.pdf).
Confirm that traffic is routed to the appropriate origins based on the file type.

8. Cleanup
Disable the Distribution:
In the CloudFront Console, disable the distribution.
Wait for the status to update to Disabled.
Delete the Distribution:
Once disabled, select the distribution and delete it.

Key Takeaways
Origins:
Use S3 buckets as origins with OAC to secure access.
Behaviors:
Define path-based behaviors to route traffic to specific origins.
Caching:
Disable caching during testing for immediate updates but enable it in production for better performance.
Static Website Hosting:
Leverage S3 static website hosting for default behavior in CloudFront.

