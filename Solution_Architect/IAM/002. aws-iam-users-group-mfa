AWS Identity and Access Management (IAM) 


IAM is a core AWS service for managing authentication and authorization of users, groups, roles, and applications.

IAM enables secure access to AWS resources using:
Management Console
Command Line Interface (CLI)
API via SDKs

Key IAM Concepts
_________________

Authentication: Proving identity (e.g., via a password or access key).
Authorization: Determining what actions a user or application is allowed to perform (via policies).
Principal: An entity (user, role, or application) that sends requests to AWS.


Core IAM Components
____________________


**You cannot delegate using a policy. You delegate using a role and you define permissions to the role through a policy.**


Users:

Individual accounts for people accessing AWS.
No permissions by default—permissions must be assigned via policies.
Example: User Andrea can log in with a friendly name and password.
Associated with a unique Amazon Resource Name (ARN):
Example: arn:aws:iam::123456789012:user/Andrea

User Groups:

Logical grouping of users for easier permissions management.
Permissions policies applied to a group are inherited by its members.
Example groups: Admins, Developers, Operations.
Users can belong to multiple groups, combining permissions.

Roles:
**You can delegate permissions using roles. It’s a great way to provide permissions to resources for users and services without using permanent credentials.***

Temporary identities with specific permissions.
Assumed by a user or service to perform specific tasks.
Example: Assume a "developer" role to gain access to development-specific resources.

Policies:

Define permissions for users, groups, or roles.
Types:
Identity-based policies: Attached to users, groups, or roles.
Resource-based policies: Attached to AWS resources (e.g., S3 bucket policies).
Specify what actions can be performed on which resources. 



Authentication Mechanisms
__________________________

Management Console Access:
Uses username, password, and optionally multi-factor authentication (MFA).

CLI/API Access:
Requires Access Key ID and Secret Access Key (like a username/password pair).
Optionally, short-term credentials can be generated via AWS Security Token Service (STS).



Root User vs IAM User
______________________

Root User                                              	IAM User
Created with the account's email address.	         Created after account setup with a friendly name.
Has full, unrestricted permissions.	Permissions    must be explicitly assigned via policies.
Use only for account setup and critical tasks.	   Use for day-to-day operations.
Difficult to restrict permissions.	Permissions    are flexible and managed via policies.
Should have a strong password and MFA enabled.	   Can belong to groups for easier permissions management.


User Permissions Management
__________________________

By default, IAM users have no permissions and permissions can be assigned in two ways:
1. Directly: Attach policies directly to the user.
2. Via Groups (preferred): Attach policies to a group, and users inherit the permissions.
If a user is part of multiple groups, their permissions are cumulative.



Access Keys
_____________

Used for programmatic access via CLI or API.
Consist of:
Access Key ID: Public identifier.
Secret Access Key: Private credential for signing requests.
Should not be hardcoded in applications—use environment variables or AWS Secrets Manager.



Best Practices for IAM
________________________


Avoid Root User Usage:
Use it only for account setup or critical tasks.
Enable MFA and set a strong password.

Use Groups for Permissions:
Simplifies management and avoids direct policy attachment to individual users.

Enable MFA for Users:
Adds an additional layer of security for console access.

Rotate Access Keys Regularly:
Prevents long-term exposure of static credentials.

Follow the Principle of Least Privilege:
Grant only the permissions necessary for users or applications to perform their tasks.

Use IAM Roles for Applications:
Avoid embedding access keys in applications by assigning IAM roles.








_________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________
___________________________________________________________________________________________________________
_________________________________________________________________________________________________________
_______________________________________________________________________________________________________

Creating a User Account and Assigning Permissions via Groups in AWS IAM


Steps to Create a User and Assign Permissions

Access the IAM Service:

Log in to the AWS Management Console.
Navigate to the IAM (Identity and Access Management) service.

Create a User Group:
User groups are used to manage permissions for multiple users.

Steps:
Click on Create Group.
Name the group (e.g., admins for administrative users).
Attach a permissions policy to the group (e.g., AdministratorAccess).

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
        }
    ]
}

Action:
The * means all actions are allowed (e.g., s3:PutObject, ec2:StartInstances).
Resource:
The * means all resources are accessible (e.g., all S3 buckets, all EC2 instances, etc.).

Key Note:
Permissions assigned to the group are inherited by all users in that group.

Create a User:

Steps:
Click on Create User.
Enter a username for the new user (e.g., AdminUser).

Specify access type:

Management Console Access: Allows the user to log in to the AWS Console with a username and password.
Programmatic Access: Provides an access key and secret key for CLI/API access.

Enable Password Management:
Set an initial password or allow the user to create their own.
Optionally enforce password reset upon first login.

Add the User to a Group:
After creating the user, add them to the previously created group (admins in this case).
The user will inherit the permissions from the group.

Login as the New User

Obtain the AWS Account Sign-In URL, Typically in the format:
https://<account-id>.signin.aws.amazon.com/console

Log in using:
The username of the new user.
The password set during user creation.

If MFA is enabled, complete the authentication process.

Benefits of Using Groups for Permissions

Simplifies permissions management:
Add permissions to the group instead of individual users.
All users in the group automatically inherit the group permissions.

Reduces administrative overhead:
One policy applies to multiple users.
Easy to manage role-based access:
For example, separate groups for admins, developers, or operations.











_______________________________________________________________________________

IAM Authentication Methods and Multi-Factor Authentication (MFA) in AWS



IAM Authentication Methods

AWS provides several authentication methods to ensure secure access to AWS resources.

1. Management Console Access

Credential Type: Username and password.
Optional MFA: Users can add an additional layer of security by supplying an MFA token.

Usage:
Log in to the AWS Management Console.
After successful authentication, the user is authorized to perform actions based on assigned permissions.

2. Programmatic Access (CLI/API)

Credential Type: Access Key ID and Secret Access Key.

Functions as a username and password for programmatic access.
Known as long-term credentials because they remain valid until explicitly revoked.
Downloaded once at the time of creation and must be stored securely by the user.

Usage:

Access AWS resources via the AWS Command Line Interface (CLI).
Perform API requests programmatically using SDKs or custom scripts.



Multi-Factor Authentication (MFA)

MFA adds an extra layer of security by requiring a second factor of authentication in addition to a password. 
This reduces the risk of unauthorized access due to stolen credentials.

How MFA Works

Something You Know:

A password (knowledge factor) that only the user should know.
Ideally, it should be complex and not shared or written down.

Something You Have:

A physical or virtual device that generates a unique MFA token.
Examples:
Virtual MFA Device:
Applications like Google Authenticator or AWS Virtual MFA.
These apps generate time-based one-time passwords (TOTP).

Hardware MFA Device:
Physical tokens such as YubiKeys or other cryptographic devices.

Something You Are (Biometric Authentication):

Not currently supported by AWS, but common in other systems.
Examples: Fingerprints, retina scans, etc.


Implementing MFA

Enable MFA for the Root User Account:
Highly recommended as the root user has unrestricted access.
Provides additional protection in case the root user credentials are compromised.

Enable MFA for IAM Users:
Encouraged for all users with elevated privileges or access to sensitive resources.

How MFA Enhances Security
Prevents unauthorized access even if the password is compromised.
Requires possession of the MFA device, adding a second layer of defense.


Using MFA with Different Access Types

Console Access:
The user provides a username, password, and an MFA token.
Example flow:
Enter password → Enter MFA code → Access granted.

CLI and API Access:
AWS Security Token Service (STS) can generate temporary session tokens that include MFA.
More secure for programmatic interactions, and limits exposure of long-term credentials.

Best Practices for MFA

Enable MFA for all critical accounts:
Root user.
Admin IAM users.

Use virtual or hardware devices for MFA:
Virtual: Convenient, low-cost option using smartphone apps.
Hardware: High-security option for organizations handling sensitive resources.

Regularly review MFA setup:
Ensure all high-privilege accounts have MFA enabled.
Rotate hardware devices if lost or compromised.

***"Rotate hardware devices if lost or compromised" refers to the process of replacing and reconfiguring a new
hardware MFA device in AWS when the current device is lost, stolen, or its security is compromised.
This ensures that access remains secure and prevents unauthorized access to your AWS account. **


Authentication Flow Summary

Console Access:
Username + Password → MFA Token (if enabled) → Access AWS Console.

CLI/API Access:
Access Key ID + Secret Access Key → Optional MFA Token → Perform API/CLI operations.

Benefits of MFA
Mitigates risks from compromised passwords.
Protects against brute-force and phishing attacks.
Adds a second layer of security to sensitive AWS accounts
