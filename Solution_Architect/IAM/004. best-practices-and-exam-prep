AWS Security Best Practices 

1. Federated Access with Identity Provider

Use case: Instead of using IAM user accounts, AWS recommends using federation via an identity provider (IdP) to provide temporary credentials to users.
Benefits: Reduces exposure from compromised credentials, as users are granted temporary credentials rather than long-term access keys.
Recommendation: For new AWS environments, set up an Identity Provider federation for users to access AWS.



*******************


The phrase "Federation & Temporary Credentials: Use federated identity providers and IAM roles to minimize the risk of static credentials" 
refers to a security best practice in AWS that aims to reduce the risks associated with using long-term, static credentials
(such as access keys and passwords) by leveraging temporary credentials that are more secure.

Here’s a breakdown:

1. Federated Identity Providers:

Federation refers to the process of allowing users to authenticate via an external identity provider (such as an organization’s 
Active Directory, Google, or any other identity management system) rather than creating separate IAM users in AWS.

An identity provider (IdP) is a trusted service that authenticates users. When a user logs in, the identity provider
validates their identity and issues them a token.

In the context of AWS, AWS Identity and Access Management (IAM) can trust this external IdP to authenticate users
and then allow them to assume temporary AWS credentials.




2. IAM Roles and Temporary Credentials:

When you use IAM roles for access control, users (or applications) are granted temporary security credentials rather 
than long-term credentials (like access keys or passwords).

Temporary credentials are generated by AWS's Security Token Service (STS) and are short-lived (typically lasting from a few minutes to several hours).

These credentials are automatically rotated, reducing the chance of a breach due to a compromised key or password.

IAM roles define a set of permissions that can be assumed by a user or an application to perform actions on AWS resources.


3. Minimizing the Risk of Static Credentials:

Static credentials, like long-term AWS access keys or passwords, are at risk because if they are compromised, 
they can be used by attackers until they are manually rotated or revoked.

By using federation and temporary credentials instead of static credentials, the exposure risk is minimized because:

The credentials are temporary and expire after a short time.

Temporary credentials can be scoped to specific actions, reducing the potential damage if they are compromised.

Users don’t have to store static credentials, which means there's less risk of accidental exposure in code or repositories.


Example Scenario:

Let’s say you have a team that needs to access AWS resources, but you don’t want to create an IAM user for each person.
Instead, you can use an identity provider (such as Active Directory or an external service like Okta) to authenticate them.

Once authenticated, these users can be given temporary credentials through an IAM role. This means the users don't need to store AWS access keys
on their devices, and their credentials will expire after a set period.

**************

2. Use Temporary Credentials with IAM Roles for Workloads

Use case: Avoid embedding long-term access keys in applications.
How it works: Applications should assume IAM roles to get temporary credentials via AWS Security Token Service (STS).
Benefits: Reduces the risk of exposing static credentials and improves security.



3. Require Multi-Factor Authentication (MFA)

Recommendation: Enable MFA for all accounts, especially root and privileged accounts.
Benefits: Adds an extra layer of security to prevent unauthorized access even if credentials are compromised.


4. Rotate Access Keys Regularly

Use case: If access keys are required, they should be rotated regularly to mitigate risks of compromise.
AWS preference: Avoid using long-term credentials like access keys if possible, but if used, rotate them periodically to reduce risk.


5. Safeguard Root User Credentials

Recommendation: Root user credentials should be highly protected. Use complex passwords, enable MFA, and avoid using 
the root account for everyday tasks.
Action: Root accounts should only be used for initial account setup and emergency situations.


6. Assign Individual Accounts for Administrators

Recommendation: Administrators should use their own IAM user accounts, not the root account, for performing tasks.
Benefits: Promotes better accountability and security practices for administrative tasks.



7. Enforce Least Privilege

Concept: Grant users only the permissions they need to perform their jobs, neither more nor less.
Application: Apply the least privilege principle to both users and applications to minimize exposure and reduce security risks.


8. Start with AWS Managed Policies and Move Towards Custom Policies

Recommendation: Use AWS managed policies initially for simplicity, but as you grow and understand your environment, move toward custom policies
that grant precise permissions (least privilege).
Benefits: Custom policies help to refine and control permissions more accurately.


9. Use IAM Access Analyzer for Least Privilege Policies

How it works: The IAM Access Analyzer helps you analyze the activity of users to identify what permissions they need and adjust policies based on real usage patterns.
Benefits: Helps create least privilege policies by analyzing users' activity logs.



10. Regularly Review and Remove Unused Resources

Recommendation: Periodically review and clean up unused users, roles, permissions, and credentials.
Benefits: Reduces potential attack vectors by removing stale or unused accounts and permissions.



11. Use Conditions in IAM Policies to Restrict Access

Example: Set conditions in IAM policies, such as requiring access only from specific IP ranges (e.g., corporate IP address range).
Benefits: Adds an additional layer of security by restricting access based on environmental conditions.



12. Verify Public and Cross-Account Access with IAM Access Analyzer

Use case: Use IAM Access Analyzer to ensure that access to resources is properly restricted and not unnecessarily public or open to other accounts.
Benefits: Ensures that permissions are configured correctly and securely.


13. Establish Permissions Guardrails Across Multiple Accounts

Use case: When managing multiple AWS accounts, it's important to implement consistent security and governance policies across all accounts.


Tools:
AWS Organizations: Manage multiple AWS accounts in a central governance model.
AWS Control Tower: Set up and govern a secure, multi-account AWS environment based on AWS best practices.
Permissions Boundaries: Set maximum permissions for roles to prevent overly permissive policies from being assigned to users.



_________________________________________________________________________________________________
_____________________________________________________________________________________


Here are the key points from the exam cram session on IAM:

IAM Overview:

IAM (Identity and Access Management) controls access to AWS resources securely.
Main IAM components: Users, Groups, Policies, Roles, and Credentials.
IAM is a global service, not region-specific.
IAM is eventually consistent, meaning updates may take a little time to reflect.

IAM Users & Groups:

IAM Users represent individuals or services with AWS access.
By default, IAM users have no permissions and cannot access any resources until explicitly granted.
IAM Groups are collections of users, used to assign permissions. A group is not a principal in policies (i.e., it can’t be used in policy ARNs).
Groups should not be nested.


IAM Roles & Policies:

IAM Roles grant permissions to trusted entities (users, services) for temporary access to resources, via Security Token Service (STS).

IAM Policies are documents defining permissions for users, groups, or roles.
Identity-based policies: Assigned to users/groups/roles.
Resource-based policies: Attached to resources (e.g., S3).
Permissions boundaries: Set the maximum permissions for a policy.
Service control policies (SCPs): Set permissions for AWS Organizations.
Session policies: Used during AssumeRole API actions.

IAM Best Practices:


Lock away root user credentials: Don't use for everyday tasks.
Use individual users for access, and group them for managing permissions.
Follow least privilege: Only grant necessary permissions.
Use AWS managed policies when starting, but move to custom managed policies as you gain experience.
Enable Multi-Factor Authentication (MFA) for all users.
Rotate access keys regularly and remove unnecessary ones.
Use roles for EC2 applications and delegate permissions securely.
Policy conditions: Use conditions to restrict access, like requiring an IP range.
Monitor activity: Regularly review permissions and activities.
This approach ensures secure, efficient, and least-privilege access for your AWS environment.




Scenarios and Solutions:

Select Group of Users Changing Their IAM Password:
Solution: Create a group and apply a permissions policy granting the iam:ChangePassword API permission to that group,
allowing only specific users to change their passwords.

Delegating Permissions to EC2 Instance for DynamoDB Access:
Solution: Create an IAM role, attach a permissions policy that grants access to DynamoDB, and then assign this
role to the EC2 instance to grant the necessary permissions.

Assigning Permissions Based on Job Function for New AWS Account:
Solution: Use AWS managed policies, as they are pre-configured for common job functions (e.g., AdministratorAccess,
PowerUserAccess), especially helpful for organizations with limited AWS experience.

Restricting Access Based on Source IP Address:
Solution: Create an IAM policy and use the condition element to restrict access based 
on the requester's source IP address.

Programmatic API Calls from AWS CLI for Developers:
Solution: Instruct the developer to create access keys for programmatic access to AWS 
resources through the AWS CLI.

Full Access to All EC2 API Actions for a Group of Users:
Solution: Create a permissions policy with a wildcard for the action element (ec2:*),
granting full access to all EC2 API actions.
