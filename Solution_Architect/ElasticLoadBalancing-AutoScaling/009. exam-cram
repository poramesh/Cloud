
Here’s a detailed breakdown of the notes on Elastic Load Balancing (ELB) and Auto Scaling:

Auto Scaling:

Overview:
Auto Scaling automatically launches and terminates EC2 instances based on demand, scaling horizontally (i.e., adding or removing instances).
It provides elasticity (ability to scale resources up or down) and scalability (handling increases or decreases in load).

Scaling Triggers:
Auto Scaling can scale based on demand, such as performance metrics or CloudWatch alarms, or on a schedule (e.g., scaling up during peak hours).

Scaling Policies:
Scaling policies define how the Auto Scaling group should react to changes in demand.

Auto Scaling Groups (ASGs):
These are collections of EC2 instances that are scaled and managed together. An ASG is responsible for maintaining the desired 
number of instances based on scaling policies.

Health Checks:
EC2 Health Checks: These monitor the status of instances based on EC2 status checks.
ELB Health Checks: These check the health of EC2 instances using the load balancer.
Health Check Grace Period: This defines how long Auto Scaling waits before checking the health of an instance after it’s launched. 
No scaling actions will be performed until this period expires.

Monitoring:
Group Metrics: Collects data about the ASG (e.g., instance count, average CPU utilization) with a 1-minute granularity. These metrics need 
to be enabled manually and are free of charge.

Instance Monitoring:
Basic Monitoring: 5-minute granularity by default.
Detailed Monitoring: 1-minute granularity with additional charges.

Additional Scaling Settings:
Cooldowns: Prevent Auto Scaling from launching or terminating instances too quickly before the effect of the last action is visible.
Termination Policy: Controls which instances to terminate first during scale-in events.
Termination Protection: Prevents Auto Scaling from terminating protected instances.
Standby State: Moves instances from in-service to standby for maintenance (e.g., updates or troubleshooting).
Lifecycle Hooks: Allow for custom actions during the lifecycle of instances (e.g., running scripts before terminating an instance).





Elastic Load Balancing (ELB):

Overview:
ELB distributes incoming traffic across multiple targets (e.g., EC2 instances, containers, Lambda functions).
It provides fault tolerance by routing traffic to healthy instances and balancing the load efficiently.

Load Balancer Types:
Application Load Balancer (ALB):
Layer 7 (HTTP/HTTPS routing).
Used for web applications, microservices (e.g., Docker containers), and Lambda targets.

Network Load Balancer (NLB):
Layer 4 (TCP/UDP routing).
Used for applications with ultra-low latency and static IP addresses. Also suitable for VPC endpoint services.

Gateway Load Balancer (GLB):
Layer 3 (routes all IP packets).
Used with virtual appliances like firewalls, intrusion detection/prevention systems, etc., over the GENEVE protocol.


Subnets and Availability Zones:
Each load balancer requires at least one subnet per AZ (Availability Zone) for distribution of traffic.
The subnet must have a /27 CIDR block, which provides a minimum of 8 IP addresses.
Load balancers can be either internet-facing (public IPs for routing traffic) or internal (private IPs for routing traffic).

Cross-Zone Load Balancing:
Enabled by default on Application Load Balancers, meaning it distributes traffic across all available AZs.
Disabled by default on Network Load Balancers and Gateway Load Balancers. In this case, traffic is distributed only within the AZ that the load balancer node resides in.

Scaling with ELB:
ELB automatically scales based on incoming traffic, distributing it across registered targets.

Traffic Routing:
Internet-Facing Load Balancers use public IP addresses to route traffic to the private IPs of instances.
Internal Load Balancers route traffic entirely within a VPC, using private IPs only.

Important Configuration Notes:
Ensure there’s a public subnet in each AZ when using an internet-facing ELB.
The ELB’s health checks ensure that only healthy instances receive traffic, and it will automatically route around unhealthy instances.

Key Takeaways:
Auto Scaling provides horizontal scaling by adding or removing EC2 instances based on demand and health checks.
Elastic Load Balancing (ELB) distributes traffic across multiple targets, offering fault tolerance and scaling based on the traffic.
There are three types of load balancers for different use cases: ALB, NLB, and GLB.
Cross-Zone Load Balancing improves fault tolerance by ensuring traffic is distributed evenly across all available AZs (enabled by
default for ALBs, disabled by default for NLBs and GLBs).
These concepts are crucial for achieving high availability, fault tolerance, and scalability in your AWS environment.










Architecturee::



1. High Availability and Elastic Scalability for Web Services:
Solution: Use Amazon EC2 Auto Scaling and Application Load Balancers (ALB) across multiple Availability Zones (AZs).
This ensures high availability and the ability to scale in or out based on traffic demands.

2. Low Latency UDP Connections for Gaming Application:
Solution: Use Network Load Balancer (NLB) with a UDP listener.
Reason: NLB is optimized for low latency and can handle UDP traffic, which is necessary for real-time gaming applications.
ALB cannot handle UDP traffic.

3. Clients Need to Whitelist Static IP Addresses for Highly Available Application:
Solution: Use Network Load Balancer (NLB) to provide static IP addresses.
Reason: NLB allows you to assign static IPs to each AZ, which are useful for clients that need to whitelist fixed IPs.
Note: ALB does not provide static IP addresses; it uses DNS names, which can change over time.

4. Auto Scaling Group (ASG) Requires Disaster Recovery Across Regions:
Solution: Create an Auto Scaling group (ASG) in a second region with a capacity set to zero.
Reason: This ensures no EC2 instances are running (saving costs), but you still have the ASG setup for disaster recovery.
Additional Steps:
Take EC2 snapshots and copy them across regions.
Use Lambda or Data Lifecycle Manager (DLM) to automate the process.
Launch EC2 instances from the copied AMIs in the second region when needed.

5. Scale in Larger Increments for Significant Traffic Increases:
Solution: Use Auto Scaling with a step scaling policy.
Reason: Step scaling allows you to configure larger capacity increases when there is a significant jump in traffic, helping to manage large traffic surges.

6. Scale EC2 Instances Behind an ALB Based on Requests per Instance:
Solution: Use Auto Scaling with a target tracking policy.
Reason: The target tracking policy can monitor the ALB request count per target metric, which measures the number of requests being handled by each instance. This helps distribute the load evenly.

7. Maintain User Session After Instance Failure:
Solution: Use a session state store like DynamoDB or ElastiCache.
Reason: These services store session information, allowing users to continue their session even if the EC2 instance they were connected to fails and traffic is directed to another instance.

8. Scaling Intrusion Detection and Prevention Systems (IDS/IPS) Horizontally:
Solution: Use a Gateway Load Balancer (GLB) in front of virtual appliances.
Reason: Gateway Load Balancer is designed to handle traffic across Layer 3 (IP packets) and is ideal for scaling virtual appliances like IDS/IPS systems.


Key Takeaways:
High Availability & Scalability: Achieved with Auto Scaling and ALBs/NLBs across multiple AZs.
Low Latency & UDP: Use NLB for low latency and UDP support.
Static IP for Clients: NLB provides static IP addresses for client whitelisting.
Disaster Recovery: Use ASGs across regions with automation for instance recovery.
Large Traffic Scaling: Use step scaling for big traffic surges.
Session Management: Store session data in DynamoDB or ElastiCache for uninterrupted user experience.
IDS/IPS Scaling: Use GLB for scaling virtual appliances like IDS/IPS.
These architectural patterns ensure scalability, availability, and fault tolerance in different scenarios, from web services to gaming applications and security systems.



