Amazon Elastic Load Balancing (ELB)


Purpose:

Provides high availability and fault tolerance by distributing incoming traffic to multiple instances.
Acts as a single endpoint (DNS name or IP address) behind which multiple EC2 instances (or other targets) sit.

Supported Targets:

EC2 instances
ECS containers
IP addresses
Lambda functions
Other load balancers (can be chained together)


Key Features:

Automatic Distribution:
Distributes traffic to targets (EC2 instances, containers, etc.) across multiple availability zones.

Health Checks:
ELB performs health checks on targets (e.g., checks HTTP port 80 for a 200 status code).
If a target fails the health check, it is marked as unhealthy, and the traffic is redirected to healthy targets.

Auto Scaling Integration:
Auto scaling works with ELB to replace unhealthy instances automatically. When ELB detects a failure, it triggers auto scaling to launch new instances.

Fault Tolerance:
Even if an instance or availability zone fails, traffic is redistributed to healthy instances in other zones.



Types of Load Balancers:

1. Application Load Balancer (ALB):

Layer 7 Load Balancer: Works with HTTP/HTTPS traffic and looks at the HTTP headers.

Features:
Path-based routing (e.g., /orders vs /myaccount).
Host-based routing (routing based on domain names).
Good for web applications, microservices, and Docker containers.
Supports Lambda functions as targets.
Use for microservices architectures or applications requiring detailed routing.


Use Cases:
Use for web applications (HTTP/HTTPS).
Useful for microservices architectures like Docker containers.
Supports Lambda as a target.
Good for complex routing needs (path-based, host-based).

performances:
While ALB can handle high traffic, it’s not as fast as NLB in terms of raw performance, since it operates at the 
application layer and makes more complex routing decisions.
It can handle more complex routing logic but may introduce slightly higher latencies compared to NLB.

Routing capabilities:
Advanced routing: Routes based on content, such as URL paths, HTTP headers, HTTP methods, query strings, and hostnames.
Can perform path-based routing (e.g., routing /api traffic to one backend and /static to another) or host-based routing
(e.g., routing example.com traffic to one backend and api.example.com to another).
Supports SSL termination and WebSocket connections.

SSL Termination:
Supports SSL/TLS termination, meaning the ALB can decrypt the HTTPS traffic and forward it to backend servers as HTTP, reducing the load on the backend instances.

Health checks:
Supports HTTP/HTTPS health checks (checking if an application responds with a specific HTTP status code, like 200 OK).
Provides more granular checks for application health based on HTTP responses.

IP adressing
ALB is DNS-based, so it doesn’t use static IP addresses. Instead, it uses a DNS name to resolve the IP addresses of the load balancer.
Typically used for web applications where you don't need fixed IPs.

WebSocket Support:
Fully supports WebSockets, making it suitable for real-time applications like chat applications or live updates.

cost:
ALB might incur higher costs in scenarios with complex routing or when handling large volumes of HTTP/HTTPS traffic due to the additional features and capabilities provided.




2. Network Load Balancer (NLB):

Layer 4 Load Balancer: Works with TCP/UDP traffic, looking at port numbers (Layer 4 protocols).

Features:
Operates at Layer 4 (Transport Layer) of the OSI model.
It works with TCP and UDP traffic and forwards traffic based on IP protocol data (e.g., source and destination IP address, and port).
NLB is designed for high-performance, low-latency scenarios where you need to forward raw network packets.

Use Cases:

Best suited for high-throughput, low-latency applications that require support for TCP/UDP traffic.
Ideal for applications that deal with non-HTTP protocols, such as gaming, IoT, real-time
communications, or other network-based services.
Suitable for hybrid cloud or on-premises applications that need to forward traffic
without deep inspection of the application layer.

Performance:
High performance: Designed to handle millions of requests per second while maintaining low latencies.
Ideal for workloads that require very fast, efficient packet forwarding with minimal processing.

Routing Capabilities:
Simple routing: Routes based on IP protocol and port.
It does not inspect the content of the traffic and forwards requests based on basic network attributes.


SSL Termination:
Does not support SSL termination. If you need to use SSL/TLS, you must handle the encryption/decryption on your application or at the EC2 instances themselves.
*******
SSL (Secure Sockets Layer) is the predecessor of TLS (Transport Layer Security). It is a cryptographic protocol that was originally developed to secure 
communications over a network. SSL has been largely replaced by TLS due to improvements in security and performance, but the term "SSL" is 
still commonly used interchangeably with TLS in practice.

Key Features of SSL:

Encryption:
Protects data transmitted between two parties (e.g., a client and a server) by encrypting it, ensuring confidentiality.
Data Integrity:
Prevents data from being altered or corrupted during transmission.
Authentication:
Verifies the identity of the server (and optionally the client) using digital certificates.


How TLS Works (Simplified Steps):

Handshake:
The client (e.g., browser) and server agree on the TLS version, encryption methods, and exchange keys.
The server provides its digital certificate to prove its identity.
Optionally, the client can also authenticate itself to the server.
Session Key Generation:
Using a key exchange mechanism, the client and server generate a shared session key for encrypting the communication.
Encrypted Communication:
All subsequent communication is encrypted using the session key.

Why is TLS Important?

Protects Sensitive Data:
Encrypts data like passwords, credit card numbers, and personal information, preventing attackers from accessing it during transmission.
Maintains Trust:
Secure connections help establish trust between users and services, especially for online banking, e-commerce, and other sensitive applications.
Compliance:
Many regulatory frameworks (e.g., GDPR, PCI DSS) require encryption for sensitive data, which TLS fulfills.

********

Health Checks:
Supports TCP health checks (checking if a port is open and available).
It doesn't inspect the application response, only checking if the network connection is healthy.

IP Adressing:
NLB has the ability to assign static IP addresses to the load balancer, making it more predictable for applications that require fixed IP addresses.
It also supports Elastic IPs (EIP) for high availability.

WebSocket Support:
Does not support WebSockets natively. It can forward traffic to WebSocket servers but requires TCP-level handling.

Cost:
Generally, NLB can be more cost-effective in scenarios that require low-latency and high throughput, especially when using simple TCP/UDP routing.


Feature	Network            Load Balancer (NLB)   	                            Application Load Balancer (ALB)
OSI Layer	                 Layer 4 (TCP/UDP)	                                Layer 7 (HTTP/HTTPS)
Protocols                  Supported	TCP, UDP	                              HTTP, HTTPS, WebSocket
Routing Type	             Based on IP and port	                              Based on URL, headers, hostnames, query parameters
SSL Termination	           No	                                                Yes
Health Checks	             TCP-based	                                        HTTP/HTTPS-based
WebSocket Support	         No	                                                Yes
IP Addressing	Supports     static IP and Elastic IP	                          DNS-based
Use Case	                 High-performance, low-latency, non-HTTP traffic	  Web applications, content-based routing
Cost	                     Generally lower for simple use cases          	    Typically higher due to additional features


When to Use Which?

Network Load Balancer (NLB):
If you need to handle high throughput and low-latency, TCP/UDP traffic.
Ideal for non-HTTP applications (e.g., real-time applications, gaming, IoT).
Requires static IP addresses and simpler network-based routing.

Application Load Balancer (ALB):
If your application is web-based and needs content-based routing or advanced routing logic.
Ideal for HTTP/HTTPS applications, including microservices architectures.
Supports SSL termination, WebSockets, and more granular health checks.


3, Gateway Load Balancer (GLB):

Used for load balancing traffic to virtual appliances (e.g., firewalls, intrusion detection/prevention systems).
Uses the Geneve protocol for inspecting incoming traffic.
Provides centralized inspection and monitoring for third-party virtual network appliances.

Use Cases:

Deploy for virtual network appliances (firewalls, IDS/IPS, deep packet inspection).
Use when you need centralized traffic inspection and monitoring.


Conclusion:
Elastic Load Balancing ensures high availability and fault tolerance by distributing traffic across multiple targets and integrating with services like Auto Scaling.
Different types of load balancers (ALB, NLB, GLB) are suited for different use cases depending on the level of traffic inspection and performance needs.








_______________________________________________________________________________________


 Load Balancer Deployment:

1. Target Groups:
Target groups define the type of target and protocol used.
Targets can be EC2 instances, Lambda functions, or IP addresses.
Health checks determine the availability and readiness of targets, and the load balancer only forwards traffic to healthy targets.

Example Use Case
Microservices Architecture:
One target group routes /user requests to a service managing user data.
Another target group routes /orders requests to a service managing order data.

Static and Dynamic Content:
A target group for /dynamic/* routes requests to EC2 instances running application logic.
A target group for /static/* routes requests to EC2 instances optimized for serving static files or even to an S3 bucket.


2. VPC and Availability Zones:
Instances are deployed in a VPC and health checks are performed based on protocol and port.

3. Target Registration:
Manual registration of targets or automatic registration via Auto Scaling Groups (ASG).

4. Load Balancer and Listener:
The load balancer listens on a defined protocol/port.
The protocol/port can differ from the target group's protocol/port.

5. Routing and Encryption:
Routing rules can be applied for advanced traffic management.
SSL/TLS certificates can be assigned for encryption.


Supported Configurations for ALB vs NLB:

1. Application Load Balancer (ALB):

Supported Target Types: EC2 instances, IP addresses, Lambda functions.
Protocol: Must be HTTP or HTTPS.
Health Check Protocol: Must be HTTP or HTTPS (TCP is not supported).So now you can have a static public IP address assigned
to those nodes that are running in each availability zone.
Advanced Request Routing: Supports path-based and host-based routing.


2. Network Load Balancer (NLB):

Supported Target Types: EC2 instances, IP addresses, Application Load Balancers.
Protocol: Must be TCP or UDP.
Health Check Protocol: Any protocol is supported (e.g., TCP, HTTP).
Elastic IPs: can define Elastic IPs per subnet. something that is specific to NLB.
No Advanced Request Routing: Unlike ALB, NLB does not support advanced request routing but can create multiple listeners for different ports.

http://example.com:8080


_______________________________________

Advanced Request Routing (ALB):

ALB supports advanced request routing features, such as:
Path-based routing: Routing based on the URL path (e.g., /api to one backend, /images to another).
Host-based routing: Routing based on the hostname or subdomain (e.g., api.example.com to one backend, www.example.com to another).
Header-based or query-string-based routing: Routing based on HTTP headers or query parameters in the request.

These features allow ALB to inspect the HTTP/HTTPS request at the application layer (Layer 7) and route traffic to the appropriate
backend service based on the content of the request.



No Advanced Request Routing (NLB):

NLB, on the other hand, does not support the same level of advanced routing based on request content (like URL paths, hostnames, headers, etc.) because 
it operates at Layer 4 (Transport Layer), which focuses on handling TCP/UDP traffic.
Instead, NLB performs simple routing based on IP protocol (source/destination IP addresses and ports) without inspecting the content of the request.

Listeners in NLB:

While NLB does not offer advanced routing capabilities, it can create multiple listeners for different ports.
A listener is a process that checks for incoming connection requests. NLB can have listeners for different ports (e.g., port 80 for HTTP, 
port 443 for HTTPS, port 8080 for custom applications, etc.).
Each listener can route traffic to a target group based on the port, but it will not inspect the request further for advanced routing decisions.



Why Create Multiple Listeners?

Creating multiple listeners is necessary when:
You want to handle traffic on different protocols or ports.
Example: An ALB with listeners for HTTP on port 80 and HTTPS on port 443.
You have multiple applications or microservices, each using a different port.
Example: An NLB with listeners for TCP traffic on port 3306 (MySQL) and port 6379 (Redis).

Why Only One Listener per Port per Load Balancer?

The limitation of one listener per port per load balancer exists because:
Port Conflict: A listener operates on a specific port (e.g., port 80 for HTTP or port 443 for HTTPS). Allowing multiple listeners to operate on the
same port would cause conflicts since the load balancer wouldn't know which listener should handle incoming requests on that port.
Port Uniqueness: A port on a network interface can only bind to one application or process at a time. The load balancer enforces this 
uniqueness for efficient routing and simplicity.


External Targets:
NLB can route traffic to on-premises data centers or targets outside of the VPC.

_____________________________________________________________________



Source IP Address:

ALB: Uses the private IP address of the load balancer node as the source IP. here the instance wont see ip adress of the client.

ip-b = ipadress of load balancer
ip-a = ip adress of client 

ALB (CLB AS WELL we get the ip adress of the load balancer)

source protcol port
ip-b    https   80

NLB: When targets are registered by instance ID, the client's IP address is visible to the application (important for logging and security).(wchi means while creating target if we
select instances then we can see the ip if we seelct ip then we wont)
When registered by IP address, the IP seen by the application is the IP address of the load balancer node.

and also when using global accelator, source ips are private ips of NLB nodes
applicable for TCP and TLS  and for TCP_UDP should be ip = client address


Handling Source IP Addresses:

ALB:
The X-Forwarded-For*(type of header and if enable this ) can be used to capture the client's IP address when using ALB.

NLB:
The source IP for clients is either the load balancer node IP or the client's IP address depending on target registration (instance ID or IP address).
When using VPC Endpoint or Global Accelerator, the source IPs are the private IPs of the NLB nodes.



((You might have two EC2 instances running the same application, one in AZ us-east-1a and another in AZ us-east-1b. Both instances can be part of the same target group.))


Key Differences Between ALB and NLB:

Feature	Application
                              Load Balancer (ALB)	                    Network Load Balancer (NLB)
Target Types:          EC2 instances, IP addresses, Lambda functions	      EC2 instances, IP addresses, ALBs (for chaining)
Protocol               HTTP, HTTPS                                          TCP, UDP
Health Check Protocol	 HTTP, HTTPS	                                        Any protocol (TCP, HTTP, etc.)
Elastic IP	           Not supported  	                                    Supported per subnet
Advanced Routing	     Path-based, Host-based routing	                      Not supported
Use Cases	             Web applications, Microservices, Lambda	            High performance, Low latency applications
Listener	             HTTP, HTTPS                                         	TCP, UDP
Source IP	             Private IP of the Load Balancer node	                 Client's IP or Load Balancer node IP (depends on registration)





HOL:


1. Initial Setup
Auto Scaling Group: Two EC2 instances deployed across two Availability Zones (e.g., us-east-1a and us-east-1b), managed by an Auto Scaling group.
Goal: Place an Application Load Balancer (ALB) in front of the Auto Scaling group to route and distribute traffic evenly between the instances.

2. Target Group Creation
Definition: A target group defines the targets (e.g., instances, Lambda functions) for the load balancer.
Steps:
Navigate to Target Groups in the AWS Management Console.
Select Instances as the target type (compatible with ALB).(here we can also select lambda, another alb as target group)
Configure:
Protocol: HTTP.
Port: 80 (where the web server is running).
Health Checks: Use default settings (e.g., check HTTP / on port 80).
Avoid manually adding instances to the target group; instead, allow the Auto Scaling group to handle dynamic target registration.
Create the target group (e.g., TG1).

3. Application Load Balancer (ALB) Creation
Definition: ALB routes HTTP/HTTPS traffic and supports advanced routing features like path-based and host-based routing.
Steps:
Go to Load Balancers → Create an ALB.
Configure:
Name: ALB1.
Type: Internet-facing (public DNS name for external access).(we got internal as option as well where we will route internally)
VPC and Subnets: Select subnets in the two AZs (us-east-1a and us-east-1b).
Security Group: Attach a web access security group that allows HTTP traffic on port 80.
Define Listeners and routinng:
Protocol: HTTP.
Port: 80.
Routing: Forward traffic to TG1 (target group).
Create the ALB and wait for provisioning.

4. Linking the Auto Scaling Group to the Target Group
Objective: Ensure the Auto Scaling group dynamically registers new or replaced instances in the target group. (we avoidede manual addition of instnace so we do it here) 
Steps:
Go to Auto Scaling Group → Edit Load Balancing settings.
Select the target group TG1 under "Application, Network, or Gateway Load Balancer Target Groups."
Save the configuration.

5. Testing the Setup
Target Registration:
Check the Target Group page.
Verify that the instances are automatically registered with the target group.
Initial health status: Initial → changes to Healthy after health checks pass.
Access ALB:
Copy the DNS name of the ALB from the Load Balancer details.
Paste it into a browser to test connectivity.
Refresh the page to observe traffic being routed to instances in different AZs.

6. Key Takeaways
Dynamic Target Assignment: Auto Scaling dynamically registers instances to the target group, eliminating the need for manual intervention.
Health Checks: The load balancer performs periodic health checks on targets to ensure traffic is only routed to healthy instances.
Cross-Zone Load Balancing: Traffic is distributed evenly across instances in different AZs, providing fault tolerance and high availability.

7. Next Steps
Scaling Policy:
Configure policies to automatically adjust the number of instances in response to changing traffic loads.
Test the setup by adding load and observing how the Auto Scaling group reacts.
